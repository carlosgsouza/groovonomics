2+2
package.install("psych")
install.packages("psych")
clear
5Ë†5
5^5
v=c(1, 2, 34, 5,  "a")
v
d=data.frame(id=1:5, gender=c(2, 2, 3, 41, 0))
d
view(d)
View(d)
edit(d)
d
View(d)
edit(d)
getwd()
install.packages(sm)
install.packages("sm")
search()
install.packages("sm")
search()
defaults write org.R-project.R force.LANG en_US.UTF-8
getwd()
data<-read.table("minutes.txt")
describe(data)
library(psych)#
library(sm)#
library(ggplot2)#
library(MASS)
describe(data)
qplot(data, binwidth=5)
qplot(data[,1], binwidth=5)
data<-read.table("minutes.txt")
qplot(data[,1], binwidth=5)
data<-read.table("minutes.txt")
qplot(data[,1], binwidth=5)
data<-read.table("minutes.txt")
qplot(data[,1], binwidth=5)
library(psych)#
library(sm)#
library(ggplot2)#
library(MASS)#
#
setwd("~/workspace_gg/groovonomics/aosd_2014/analysis")#
#
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
matureData=data[data$loc>2000 & data$commits>100, ]#
nonMatureData=data[data$loc<=2000 | data$commits<=100, ]#
#
i<-data.frame(	#
				projectId=1,#
				loc=2,#
				commits=3,#
				age=4,#
#
				all=5, #
#
				localVariable=6,#
				methodReturn=7,#
				methodParameter=8,#
				constructorParameter=9,#
				field=10,#
				privateMethodReturn=11,#
				protectedMethodReturn=12,#
				publicMethodReturn=13,#
				privateMethodParameter=14,#
				protectedMethodParameter=15,#
				publicMethodParameter=16,#
				privateConstructorParameter=17,#
				protectedConstructorParameter=18,#
				publicConstructorParameter=19,#
				privateField=20,#
				protectedField=21,#
				publicField=22,#
				private=23,#
				protected=24,#
				public=25#
			)#
label<-c(#
		"project id",#
		"LOC",#
		"number of commits",#
		"age",#
		"all types",#
#
		"local variables",#
		"returns of methods",#
		"parameters of methods",#
		"parameters of constructors",#
		"fields",#
#
		"returns of private methods",#
		"returns of protected methods",#
		"returns of public methods",#
#
		"parameters of private methods",#
		"parameters of protected methods",#
		"parameters of public methods",#
#
		"parameters of private constructors",#
		"parameters of protected constructors",#
		"parameters of public constructors",#
#
		"private fields",#
		"protected fields",#
		"public fields",#
#
		"private fields and methods",#
		"protected fields and methods",#
		"public fields and methods"#
)
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			d_i=data[!is.na(data[i,]),i]#
			d_j=data[!is.na(data[j,]),j]#
			test<-wilcox.test(d_i, d_j, conf.int=T)#
			print(test)#
			p=test$p.value#
			difference=test$conf.int#
			result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}#
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + geom_boxplot(notch=T) + coord_flip() + labs(y="Use of types in declarations", x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
}#
#
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	uTest(data, folder, description, columnsToCompare)#
	boxPlot(data, folder, description, columnsToCompare)#
}#
#
compareAllSamples<-function(data, folder) {#
	print(paste("Processing", folder, "data"))#
	compareSamples(data, folder, "declaration by type",			i$localVariable:i$field)#
	compareSamples(data, folder, "returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples(data, folder, "parameters of methods",		i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples(data, folder, "parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples(data, folder, "fields", 						i$privateField:i$publicField)#
	compareSamples(data, folder, "declarations by visibiltiy", 	i$private:i$public)#
}#
#
boxPlot(data, folder, "all combinations", i$localVariable:i$public)#
boxPlot(matureData, folder, "all combinations", i$localVariable:i$public)#
boxPlot(nonMatureData, folder, "all combinations", i$localVariable:i$public)#
compareAllSamples(data, "all")#
compareAllSamples(matureData, "mature")#
compareAllSamples(nonMatureData, "non-mature")
boxPlot(data, "all", "all combinations", i$localVariable:i$public)#
boxPlot(matureData, "mature", "all combinations", i$localVariable:i$public)#
boxPlot(nonMatureData, "non-mature", "all combinations", i$localVariable:i$public)
boxPlot(data, "all", "fields", i$localVariable:i$field)
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + geom_boxplot(notch=T) + coord_flip() + labs(y="Use of types in declarations", x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
#
	plot#
}
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + geom_boxplot(notch=T) + coord_flip() + labs(y="Use of types in declarations", x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
#
	plot#
}#
boxPlot(data, "all", "fields", i$localVariable:i$field)
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + #
			geom_boxplot(notch=T) + #
			coord_flip() + #
			labs(y=paste("Use of types in", description), x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
#
	plot#
}#
boxPlot(data, "all", "fields", i$localVariable:i$field)
boxPlot(data, "all", "returns of methods", i$localVariable:i$field)
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + #
			geom_boxplot(notch=T) + #
			coord_flip() + #
			labs(y=paste("Use of types in", description), x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
#
	plot#
}#
#
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	# uTest(data, folder, description, columnsToCompare)#
	boxPlot(data, folder, description, columnsToCompare)#
}#
#
compareAllSamples<-function(data, folder) {#
	print(paste("Processing", folder, "data"))#
	compareSamples(data, folder, "declarations by type",		i$localVariable:i$field)#
	compareSamples(data, folder, "returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples(data, folder, "parameters of methods",		i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples(data, folder, "parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples(data, folder, "fields", 						i$privateField:i$publicField)#
	compareSamples(data, folder, "declarations by visibiltiy", 	i$private:i$public)#
}#
#
boxPlot(data, "all", "all combinations", i$localVariable:i$public)#
boxPlot(matureData, "mature", "all combinations", i$localVariable:i$public)#
boxPlot(nonMatureData, "non-mature", "all combinations", i$localVariable:i$public)#
#
compareAllSamples(data, "all")#
compareAllSamples(matureData, "mature")
compareAllSamples(nonMatureData, "non-mature")
data_tests<-read.table("parsed/declaration_by_tests.txt", header=T)#
describe(data_tests)#
#
data_scripts<-read.table("parsed/declaration_by_scripts.txt", header=T)#
describe(data_scripts)
data_tests<-read.table("parsed/declaration_by_tests.txt", header=T)#
describe(data_tests)#
#
data_scripts<-read.table("parsed/declaration_by_scripts.txt", header=T)#
describe(data_scripts)
describe(data_scripts$condition)
str(data_scripts$condition)
data_all<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
data_tests_all<-read.table("parsed/declaration_by_tests.txt", header=T)#
describe(data_tests)#
#
data_scripts_all<-read.table("parsed/declaration_by_scripts.txt", header=T)#
describe(data_scripts)#
data=data_all#
#
matureData=data[data$loc>2000 & data$commits>100, ]#
nonMatureData=data[data$loc<=2000 | data$commits<=100, ]#
#
testData=data_tests_all[data$condition="test", ]#
mainData=data_tests_all[data$condition="not-test", ]#
#
scriptData=data_scripts_all[data$condition="script", ]#
classData=data_scripts_all[data$condition="not-script", ]
data_all<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
data_tests_all<-read.table("parsed/declaration_by_tests.txt", header=T)#
describe(data_tests)#
#
data_scripts_all<-read.table("parsed/declaration_by_scripts.txt", header=T)#
describe(data_scripts)#
data=data_all#
#
matureData=data[data$loc>2000 & data$commits>100, ]#
nonMatureData=data[data$loc<=2000 | data$commits<=100, ]#
#
testData=data_tests_all[data$condition=="test", ]#
mainData=data_tests_all[data$condition=="not-test", ]#
#
scriptData=data_scripts_all[data$condition=="script", ]#
classData=data_scripts_all[data$condition=="not-script", ]
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=3, width=7)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in declarationDataRange) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
plotDeclarationTypeHistogramOfData(data, "all")#
#
plotDeclarationTypeHistogramOfData(matureData, "mature")#
plotDeclarationTypeHistogramOfData(nonMatureData, "non-mature")#
#
plotDeclarationTypeHistogramOfData(testData, "test")#
plotDeclarationTypeHistogramOfData(mainData, "main")#
#
plotDeclarationTypeHistogramOfData(scriptData, "script")#
plotDeclarationTypeHistogramOfData(classData, "class")
setwd("~/workspace_gg/groovonomics/aosd_2014/analysis")#
#
data_all<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
data_tests_all<-read.table("parsed/declaration_by_tests.txt", header=T)#
describe(data_tests)#
#
data_scripts_all<-read.table("parsed/declaration_by_scripts.txt", header=T)#
describe(data_scripts)#
data=data_all#
#
matureData=data[data$loc>2000 & data$commits>100, ]#
nonMatureData=data[data$loc<=2000 | data$commits<=100, ]#
#
testData=data_tests_all[data$condition=="test", ]#
mainData=data_tests_all[data$condition=="not-test", ]#
#
scriptData=data_scripts_all[data$condition=="script", ]#
classData=data_scripts_all[data$condition=="not-script", ]#
#
i<-data.frame(	#
				projectId=1,#
				loc=2,#
				commits=3,#
				age=4,#
#
				all=5, #
#
				localVariable=6,#
				methodReturn=7,#
				methodParameter=8,#
				constructorParameter=9,#
				field=10,#
				privateMethodReturn=11,#
				protectedMethodReturn=12,#
				publicMethodReturn=13,#
				privateMethodParameter=14,#
				protectedMethodParameter=15,#
				publicMethodParameter=16,#
				privateConstructorParameter=17,#
				protectedConstructorParameter=18,#
				publicConstructorParameter=19,#
				privateField=20,#
				protectedField=21,#
				publicField=22,#
				private=23,#
				protected=24,#
				public=25#
			)#
label<-c(#
		"project id",#
		"LOC",#
		"number of commits",#
		"age",#
		"all types",#
#
		"local variables",#
		"returns of methods",#
		"parameters of methods",#
		"parameters of constructors",#
		"fields",#
#
		"returns of private methods",#
		"returns of protected methods",#
		"returns of public methods",#
#
		"parameters of private methods",#
		"parameters of protected methods",#
		"parameters of public methods",#
#
		"parameters of private constructors",#
		"parameters of protected constructors",#
		"parameters of public constructors",#
#
		"private fields",#
		"protected fields",#
		"public fields",#
#
		"private fields and methods",#
		"protected fields and methods",#
		"public fields and methods"#
)#
#
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=3, width=7)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in i$localVariable:i$public) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
plotDeclarationTypeHistogramOfData(data, "all")#
#
plotDeclarationTypeHistogramOfData(matureData, "mature")#
plotDeclarationTypeHistogramOfData(nonMatureData, "non-mature")#
#
plotDeclarationTypeHistogramOfData(testData, "test")#
plotDeclarationTypeHistogramOfData(mainData, "main")#
#
plotDeclarationTypeHistogramOfData(scriptData, "script")#
plotDeclarationTypeHistogramOfData(classData, "class")
setwd("~/workspace_gg/groovonomics/aosd_2014/analysis")#
#
data_all<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
data_tests_all<-read.table("parsed/declaration_by_tests.txt", header=T)#
describe(data_tests)#
#
data_scripts_all<-read.table("parsed/declaration_by_scripts.txt", header=T)#
describe(data_scripts)#
data=data_all#
#
matureData=data[data$loc>2000 & data$commits>100, ]#
nonMatureData=data[data$loc<=2000 | data$commits<=100, ]#
#
testData=data_tests_all[data$condition=="test", ]#
mainData=data_tests_all[data$condition=="not-test", ]#
#
scriptData=data_scripts_all[data$condition=="script", ]#
classData=data_scripts_all[data$condition=="not-script", ]#
#
i<-data.frame(	#
				projectId=1,#
				loc=2,#
				commits=3,#
				age=4,#
#
				all=5, #
#
				localVariable=6,#
				methodReturn=7,#
				methodParameter=8,#
				constructorParameter=9,#
				field=10,#
				privateMethodReturn=11,#
				protectedMethodReturn=12,#
				publicMethodReturn=13,#
				privateMethodParameter=14,#
				protectedMethodParameter=15,#
				publicMethodParameter=16,#
				privateConstructorParameter=17,#
				protectedConstructorParameter=18,#
				publicConstructorParameter=19,#
				privateField=20,#
				protectedField=21,#
				publicField=22,#
				private=23,#
				protected=24,#
				public=25#
			)#
label<-c(#
		"project id",#
		"LOC",#
		"number of commits",#
		"age",#
		"all types",#
#
		"local variables",#
		"returns of methods",#
		"parameters of methods",#
		"parameters of constructors",#
		"fields",#
#
		"returns of private methods",#
		"returns of protected methods",#
		"returns of public methods",#
#
		"parameters of private methods",#
		"parameters of protected methods",#
		"parameters of public methods",#
#
		"parameters of private constructors",#
		"parameters of protected constructors",#
		"parameters of public constructors",#
#
		"private fields",#
		"protected fields",#
		"public fields",#
#
		"private fields and methods",#
		"protected fields and methods",#
		"public fields and methods"#
)#
#
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=3, width=7)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in i$localVariable:i$public) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
# Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			d_i=data[!is.na(data[i,]),i]#
			d_j=data[!is.na(data[j,]),j]#
			test<-wilcox.test(d_i, d_j, conf.int=T)#
			print(test)#
			p=test$p.value#
			difference=test$conf.int#
			result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}#
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + #
			geom_boxplot(notch=T) + #
			coord_flip() + #
			labs(y=paste("Use of types in", description), x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
}#
#
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	# uTest(data, folder, description, columnsToCompare)#
	boxPlot(data, folder, description, columnsToCompare)#
}#
#
compareAllSamples<-function(data, folder) {#
	print(paste("Processing", folder, "data"))#
	compareSamples(data, folder, "declarations by type",		i$localVariable:i$field)#
	compareSamples(data, folder, "returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples(data, folder, "parameters of methods",		i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples(data, folder, "parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples(data, folder, "fields", 						i$privateField:i$publicField)#
	compareSamples(data, folder, "declarations by visibiltiy", 	i$private:i$public)#
}#
#
analyzeSample<-function(data, description) {#
	compareSamples(data, description)	#
	plotDeclarationTypeHistogramOfData(data, description)#
}#
#
boxPlot(data, "all", "all combinations", i$localVariable:i$public)#
boxPlot(matureData, "mature", "all combinations", i$localVariable:i$public)#
boxPlot(nonMatureData, "non-mature", "all combinations", i$localVariable:i$public)#
#
analyzeSample(data, "all")#
#
analyzeSample(matureData, "mature")#
analyzeSample(nonMatureData, "non-mature")#
#
analyzeSample(testData, "test")#
analyzeSample(mainData, "main")#
#
analyzeSample(scriptData, "script")#
analyzeSample(classData, "class")
analyzeSample<-function(data, description) {#
	compareAllSamples(data, description)	#
	plotDeclarationTypeHistogramOfData(data, description)#
}
analyzeSample(data, "all")
analyzeSample(testData, "test")#
analyzeSample(mainData, "main")#
#
analyzeSample(scriptData, "script")#
analyzeSample(classData, "class")
describte(testData)
describe(testData)
describe(classData)
describe(scriptData)
str(testData)
describe(testData)
testData
matureData=data[data$loc>2000 & data$commits>100, ]#
nonMatureData=data[data$loc<=2000 | data$commits<=100, ]#
#
testData=data_tests_all[data_tests_all $condition=="test", ]#
mainData=data_tests_all[data_tests_all $condition=="not-test", ]#
#
scriptData=data_scripts_all[data_scripts_all $condition=="script", ]#
classData=data_scripts_all[data_scripts_all $condition=="not-script", ]
testData
describe(testData)
analyzeSample(testData, "test")#
analyzeSample(mainData, "main")
analyzeSample(scriptData, "script")#
analyzeSample(classData, "class")
analyzeSample(scriptData, "script")
testData=data_tests_all[data_tests_all$condition=="test", ]#
mainData=data_tests_all[data_tests_all$condition=="not-test", ]#
#
scriptData=data_scripts_all[data_scripts_all$condition=="script", ]#
classData=data_scripts_all[data_scripts_all$condition=="not-script", ]
analyzeSample(testData, "test")#
analyzeSample(mainData, "main")#
#
analyzeSample(scriptData, "script")#
analyzeSample(classData, "class")
describe(scriptData)
analyzeSample(scriptData, "script")
describe(scriptData)
warnings()
scriptData="""
"
scriptData=""
analyzeSample(scriptData, "script")
scriptData=data_scripts_all[data_scripts_all$condition=="script", ]
scriptData=data_scripts_all[data_scripts_all$condition=="script", ]
analyzeSample(scriptData, "script")
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	columnsWithData=c()#
	for(c in columnsToCompare) {#
		if(length(data[!is.na(data[c]), c]) > 0) {#
			append(columnsWithData, c)#
		}#
	}#
	print(columnsWithData)#
	uTest(data, folder, description, columnsWithData)#
	boxPlot(data, folder, description, columnsWithData)#
}
analyzeSample(scriptData, "script")
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	columnsWithData=c()#
	for(c in columnsToCompare) {#
		print(c)#
		if(length(data[!is.na(data[c]), c]) > 0) {#
			print(c)#
			append(columnsWithData, c)#
		}#
	}#
	print(columnsWithData)#
	uTest(data, folder, description, columnsWithData)#
	boxPlot(data, folder, description, columnsWithData)#
}
analyzeSample(scriptData, "script")
describe(scriptData)
analyzeSample(scriptData, "script")
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	columnsWithData=numeric()#
	for(c in columnsToCompare) {#
		if(length(data[!is.na(data[c]), c]) > 0) {#
			columnsWithData <- c(columnsWithData, 1)#
		}#
	}#
	print(columnsWithData)#
	uTest(data, folder, description, columnsWithData)#
	boxPlot(data, folder, description, columnsWithData)#
}
analyzeSample(scriptData, "script")
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	columnsWithData=numeric()#
	for(c in columnsToCompare) {#
		if(length(data[!is.na(data[c]), c]) > 0) {#
			columnsWithData <- c(columnsWithData, c)#
		}#
	}#
	print(columnsWithData)#
	uTest(data, folder, description, columnsWithData)#
	boxPlot(data, folder, description, columnsWithData)#
}
analyzeSample(scriptData, "script")
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			if(i != j) {#
				d_i=data[!is.na(data[i,]),i]#
				d_j=data[!is.na(data[j,]),j]#
				test<-wilcox.test(d_i, d_j, conf.int=T)#
				print(test)#
				p=test$p.value#
				difference=test$conf.int#
				result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
				row=row+1#
			}#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}
analyzeSample(scriptData, "script")
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			if(i != j) {#
				print(i, j)#
				d_i=data[!is.na(data[i,]),i]#
				d_j=data[!is.na(data[j,]),j]#
				test<-wilcox.test(d_i, d_j, conf.int=T)#
				print(test)#
				p=test$p.value#
				difference=test$conf.int#
				result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
				row=row+1#
			}#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}
analyzeSample(scriptData, "script")
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			if(i != j) {#
				print(i)#
				print(j)#
				d_i=data[!is.na(data[i,]),i]#
				d_j=data[!is.na(data[j,]),j]#
				describe(d_i)#
				describe(d_j)#
				test<-wilcox.test(d_i, d_j, conf.int=T)#
				print(test)#
				p=test$p.value#
				difference=test$conf.int#
				result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
				row=row+1#
			}#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}
analyzeSample(scriptData, "script")
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			if(i != j) {#
				print(i)#
				print(j)#
				d_i=data[!is.na(data[i,]),i]#
				d_j=data[!is.na(data[j,]),j]#
				describe(d_i)#
				describe(d_j)#
				test<-wilcox.test(d_i, d_j, conf.int=T)#
				print(test)#
				p=test$p.value#
				difference=test$conf.int#
				result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
				row=row+1#
			}#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}
analyzeSample(scriptData, "script")
describe(scriptData)
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			if(i != j) {#
				print(i)#
				print(j)#
				d_i=data[!is.na(data[i,]),i]#
				d_j=data[!is.na(data[j,]),j]#
				describe(d_i)#
				describe(d_j)#
				test<-wilcox.test(d_i, d_j, conf.int=T)#
				print(test)#
				p=test$p.value#
				difference=test$conf.int#
				result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
				row=row+1#
			}#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}
analyzeSample(scriptData, "script")
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			if(i != j) {#
				print(i)#
				print(j)#
				d_i=data[!is.na(data[i,]),i]#
				d_j=data[!is.na(data[j,]),j]#
				str(d_i)#
				str(d_j)#
				test<-wilcox.test(d_i, d_j, conf.int=T)#
				print(test)#
				p=test$p.value#
				difference=test$conf.int#
				result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
				row=row+1#
			}#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}#
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + #
			geom_boxplot(notch=T) + #
			coord_flip() + #
			labs(y=paste("Use of types in", description), x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
}#
#
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	columnsWithData=numeric()#
	for(c in columnsToCompare) {#
		if(length(data[!is.na(data[c]), c]) > 0) {#
			columnsWithData <- c(columnsWithData, c)#
		}#
	}#
	print(columnsWithData)#
	uTest(data, folder, description, columnsWithData)#
	boxPlot(data, folder, description, columnsWithData)#
}
analyzeSample(scriptData, "script")
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			if(i != j) {#
				print(i)#
				print(j)#
				d_i=data[!is.na(data[i,]),i]#
				d_j=data[!is.na(data[j,]),j]#
				describe(d_i)#
				describe(d_j)#
				test<-wilcox.test(d_i, d_j, conf.int=T)#
				print(test)#
				p=test$p.value#
				difference=test$conf.int#
				result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
				row=row+1#
			}#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}#
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + #
			geom_boxplot(notch=T) + #
			coord_flip() + #
			labs(y=paste("Use of types in", description), x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
}#
#
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	columnsWithData=numeric()#
	for(c in columnsToCompare) {#
		if(length(data[!is.na(data[c]), c]) > 0) {#
			columnsWithData <- c(columnsWithData, c)#
		}#
	}#
	print(columnsWithData)#
	uTest(data, folder, description, columnsWithData)#
	boxPlot(data, folder, description, columnsWithData)#
}#
#
compareAllSamples<-function(data, folder) {#
	print(paste("Processing", folder, "data"))#
	compareSamples(data, folder, "declarations by type",		i$localVariable:i$field)#
	compareSamples(data, folder, "returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples(data, folder, "parameters of methods",		i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples(data, folder, "parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples(data, folder, "fields", 						i$privateField:i$publicField)#
	compareSamples(data, folder, "declarations by visibiltiy", 	i$private:i$public)#
}#
#
analyzeSample<-function(data, description) {#
	compareAllSamples(data, description)	#
	plotDeclarationTypeHistogramOfData(data, description)#
}
analyzeSample(scriptData, "script")
analyzeSample(classData, "class")
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			if(i < j) {#
				print(i)#
				print(j)#
				d_i=data[!is.na(data[i,]),i]#
				d_j=data[!is.na(data[j,]),j]#
				describe(d_i)#
				describe(d_j)#
				test<-wilcox.test(d_i, d_j, conf.int=T)#
				print(test)#
				p=test$p.value#
				difference=test$conf.int#
				result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
				row=row+1#
			}#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}#
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + #
			geom_boxplot(notch=T) + #
			coord_flip() + #
			labs(y=paste("Use of types in", description), x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
}#
#
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	columnsWithData=numeric()#
	for(c in columnsToCompare) {#
		if(length(data[!is.na(data[c]), c]) > 0) {#
			columnsWithData <- c(columnsWithData, c)#
		}#
	}#
	print(columnsWithData)#
	uTest(data, folder, description, columnsWithData)#
	boxPlot(data, folder, description, columnsWithData)#
}#
#
compareAllSamples<-function(data, folder) {#
	print(paste("Processing", folder, "data"))#
	compareSamples(data, folder, "declarations by type",		i$localVariable:i$field)#
	compareSamples(data, folder, "returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples(data, folder, "parameters of methods",		i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples(data, folder, "parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples(data, folder, "fields", 						i$privateField:i$publicField)#
	compareSamples(data, folder, "declarations by visibiltiy", 	i$private:i$public)#
}#
#
analyzeSample<-function(data, description) {#
	compareAllSamples(data, description)	#
	plotDeclarationTypeHistogramOfData(data, description)#
}
analyzeSample(scriptData, "script")
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			if(i < j) {#
				print(i)#
				print(j)#
				d_i=data[!is.na(data[i,]),i]#
				d_j=data[!is.na(data[j,]),j]#
				describe(d_i)#
				describe(d_j)#
				test<-wilcox.test(d_i, d_j, conf.int=T)#
				print(test)#
				p=test$p.value#
				difference=test$conf.int#
				result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
				row=row+1#
			}#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}#
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + #
			geom_boxplot(notch=T) + #
			coord_flip() + #
			labs(y=paste("Use of types in", description), x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
}#
#
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	columnsWithData=numeric()#
	for(c in columnsToCompare) {#
		if(length(data[!is.na(data[c]), c]) > 1) {#
			columnsWithData <- c(columnsWithData, c)#
		}#
	}#
	uTest(data, folder, description, columnsWithData)#
	boxPlot(data, folder, description, columnsWithData)#
}#
#
compareAllSamples<-function(data, folder) {#
	print(paste("Processing", folder, "data"))#
	compareSamples(data, folder, "declarations by type",		i$localVariable:i$field)#
	compareSamples(data, folder, "returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples(data, folder, "parameters of methods",		i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples(data, folder, "parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples(data, folder, "fields", 						i$privateField:i$publicField)#
	compareSamples(data, folder, "declarations by visibiltiy", 	i$private:i$public)#
}#
#
analyzeSample<-function(data, description) {#
	compareAllSamples(data, description)	#
	plotDeclarationTypeHistogramOfData(data, description)#
}
analyzeSample(scriptData, "script")
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			if(i < j) {#
				print(i)#
				print(j)#
				d_i=data[!is.na(data[i,]),i]#
				d_j=data[!is.na(data[j,]),j]#
				print(describe(d_i))#
				print(describe(d_j))#
				test<-wilcox.test(d_i, d_j, conf.int=T)#
				print(test)#
				p=test$p.value#
				difference=test$conf.int#
				result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
				row=row+1#
			}#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}
analyzeSample(scriptData, "script")
describe(scriptData)
scriptData[!is.na(data[15,]),15]
describe(scriptData[!is.na(data[15,]),15])
describe(scriptData[!is.na(data[,14]),14])
describe(scriptData[!is.na(data[,15]),15])
describe(scriptData[!is.na(scriptData[,15]),15])
describe(scriptData[!is.na(scriptData[,14]),14])
describe(scriptData)
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=3, width=7)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in i$localVariable:i$public) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
# Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			if(i < j) {#
				print(i)#
				print(j)#
				d_i=data[!is.na(data[,i]),i]#
				d_j=data[!is.na(data[,i]),j]#
				print(describe(d_i))#
				print(describe(d_j))#
				test<-wilcox.test(d_i, d_j, conf.int=T)#
				print(test)#
				p=test$p.value#
				difference=test$conf.int#
				result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
				row=row+1#
			}#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}#
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + #
			geom_boxplot(notch=T) + #
			coord_flip() + #
			labs(y=paste("Use of types in", description), x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
}#
#
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	columnsWithData=numeric()#
	for(c in columnsToCompare) {#
		if(length(data[!is.na(data[, c]), c]) > 1) {#
			columnsWithData <- c(columnsWithData, c)#
		}#
	}#
	uTest(data, folder, description, columnsWithData)#
	boxPlot(data, folder, description, columnsWithData)#
}#
#
compareAllSamples<-function(data, folder) {#
	print(paste("Processing", folder, "data"))#
	compareSamples(data, folder, "declarations by type",		i$localVariable:i$field)#
	compareSamples(data, folder, "returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples(data, folder, "parameters of methods",		i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples(data, folder, "parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples(data, folder, "fields", 						i$privateField:i$publicField)#
	compareSamples(data, folder, "declarations by visibiltiy", 	i$private:i$public)#
}#
#
analyzeSample<-function(data, description) {#
	compareAllSamples(data, description)	#
	plotDeclarationTypeHistogramOfData(data, description)#
}
analyzeSample(scriptData, "script")
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	columnsWithData=numeric()#
	for(c in columnsToCompare) {#
		if(length(data[!is.na(data[, c]), c]) > 1) {#
			columnsWithData <- c(columnsWithData, c)#
		}#
	}#
	if(columnsWithData > 0) {#
		uTest(data, folder, description, columnsWithData)#
		boxPlot(data, folder, description, columnsWithData)	#
	}#
}
analyzeSample(scriptData, "script")
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	columnsWithData=numeric()#
	for(c in columnsToCompare) {#
		if(length(data[!is.na(data[, c]), c]) > 1) {#
			columnsWithData <- c(columnsWithData, c)#
		}#
	}#
	if(length(columnsWithData) > 0) {#
		uTest(data, folder, description, columnsWithData)#
		boxPlot(data, folder, description, columnsWithData)	#
	}#
}
analyzeSample(scriptData, "script")
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=3, width=7)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in filterColumnsWithData(i$localVariable:i$public)) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
# Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			if(i < j) {#
				d_i=data[!is.na(data[,i]),i]#
				d_j=data[!is.na(data[,i]),j]#
				test<-wilcox.test(d_i, d_j, conf.int=T)#
				print(test)#
				p=test$p.value#
				difference=test$conf.int#
				result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
				row=row+1#
			}#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}#
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + #
			geom_boxplot(notch=T) + #
			coord_flip() + #
			labs(y=paste("Use of types in", description), x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
}#
#
filterColumnsWithData<-function(data, columns) {#
	columnsWithData=numeric()#
	for(c in columnsToCompare) {#
		if(length(data[!is.na(data[, c]), c]) > 1) {#
			columnsWithData <- c(columnsWithData, c)#
		}#
	}#
	columnsWithData#
}#
#
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	columnsWithData<-filterColumnsWithData(data, columnsToCompare)#
	if(length(columnsWithData) > 0) {#
		uTest(data, folder, description, columnsWithData)#
		boxPlot(data, folder, description, columnsWithData)	#
	}#
}#
#
compareAllSamples<-function(data, folder) {#
	print(paste("Processing", folder, "data"))#
	compareSamples(data, folder, "declarations by type",		i$localVariable:i$field)#
	compareSamples(data, folder, "returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples(data, folder, "parameters of methods",		i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples(data, folder, "parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples(data, folder, "fields", 						i$privateField:i$publicField)#
	compareSamples(data, folder, "declarations by visibiltiy", 	i$private:i$public)#
}#
#
analyzeSample<-function(data, description) {#
	compareAllSamples(data, description)	#
	plotDeclarationTypeHistogramOfData(data, description)#
}
i<-data.frame(	#
				projectId=1,#
				loc=2,#
				commits=3,#
				age=4,#
#
				all=5, #
#
				localVariable=6,#
				methodReturn=7,#
				methodParameter=8,#
				constructorParameter=9,#
				field=10,#
				privateMethodReturn=11,#
				protectedMethodReturn=12,#
				publicMethodReturn=13,#
				privateMethodParameter=14,#
				protectedMethodParameter=15,#
				publicMethodParameter=16,#
				privateConstructorParameter=17,#
				protectedConstructorParameter=18,#
				publicConstructorParameter=19,#
				privateField=20,#
				protectedField=21,#
				publicField=22,#
				private=23,#
				protected=24,#
				public=25#
			)#
label<-c(#
		"project id",#
		"LOC",#
		"number of commits",#
		"age",#
		"all types",#
#
		"local variables",#
		"returns of methods",#
		"parameters of methods",#
		"parameters of constructors",#
		"fields",#
#
		"returns of private methods",#
		"returns of protected methods",#
		"returns of public methods",#
#
		"parameters of private methods",#
		"parameters of protected methods",#
		"parameters of public methods",#
#
		"parameters of private constructors",#
		"parameters of protected constructors",#
		"parameters of public constructors",#
#
		"private fields",#
		"protected fields",#
		"public fields",#
#
		"private fields and methods",#
		"protected fields and methods",#
		"public fields and methods"#
)#
#
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=3, width=7)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in filterColumnsWithData(i$localVariable:i$public)) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
# Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			if(i < j) {#
				d_i=data[!is.na(data[,i]),i]#
				d_j=data[!is.na(data[,i]),j]#
				test<-wilcox.test(d_i, d_j, conf.int=T)#
				print(test)#
				p=test$p.value#
				difference=test$conf.int#
				result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
				row=row+1#
			}#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}#
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + #
			geom_boxplot(notch=T) + #
			coord_flip() + #
			labs(y=paste("Use of types in", description), x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
}#
#
filterColumnsWithData<-function(data, columns) {#
	columnsWithData=numeric()#
	for(c in columnsToCompare) {#
		if(length(data[!is.na(data[, c]), c]) > 1) {#
			columnsWithData <- c(columnsWithData, c)#
		}#
	}#
	columnsWithData#
}#
#
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	columnsWithData<-filterColumnsWithData(data, columnsToCompare)#
	if(length(columnsWithData) > 0) {#
		uTest(data, folder, description, columnsWithData)#
		boxPlot(data, folder, description, columnsWithData)	#
	}#
}#
#
compareAllSamples<-function(data, folder) {#
	print(paste("Processing", folder, "data"))#
	compareSamples(data, folder, "declarations by type",		i$localVariable:i$field)#
	compareSamples(data, folder, "returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples(data, folder, "parameters of methods",		i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples(data, folder, "parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples(data, folder, "fields", 						i$privateField:i$publicField)#
	compareSamples(data, folder, "declarations by visibiltiy", 	i$private:i$public)#
}#
#
analyzeSample<-function(data, description) {#
	plotDeclarationTypeHistogramOfData(data, description)#
	compareAllSamples(data, description)	#
}
analyzeSample(scriptData, "script")
filterColumnsWithData<-function(data, columns) {#
	columnsWithData=numeric()#
	for(c in columns) {#
		if(length(data[!is.na(data[, c]), c]) > 1) {#
			columnsWithData <- c(columnsWithData, c)#
		}#
	}#
	columnsWithData#
}
analyzeSample(scriptData, "script")
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in filterColumnsWithData(data, i$localVariable:i$public )) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}
analyzeSample(scriptData, "script")
analyzeSample(testData, "test")#
analyzeSample(mainData, "main")
library(psych)#
library(sm)#
library(ggplot2)#
library(MASS)#
#
setwd("~/workspace_gg/groovonomics/aosd_2014/analysis")#
#
data_all<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
data_tests_all<-read.table("parsed/declaration_by_tests.txt", header=T)#
describe(data_tests)#
#
data_scripts_all<-read.table("parsed/declaration_by_scripts.txt", header=T)#
describe(data_scripts)#
data=data_all#
#
matureData=data[data$loc>2000 & data$commits>100, ]#
nonMatureData=data[data$loc<=2000 | data$commits<=100, ]#
#
testData=data_tests_all[data_tests_all$condition=="test", ]#
mainData=data_tests_all[data_tests_all$condition=="not-test", ]#
#
scriptData=data_scripts_all[data_scripts_all$condition=="script", ]#
classData=data_scripts_all[data_scripts_all$condition=="not-script", ]#
#
i<-data.frame(	#
				projectId=1,#
				loc=2,#
				commits=3,#
				age=4,#
#
				all=5, #
#
				localVariable=6,#
				methodReturn=7,#
				methodParameter=8,#
				constructorParameter=9,#
				field=10,#
				privateMethodReturn=11,#
				protectedMethodReturn=12,#
				publicMethodReturn=13,#
				privateMethodParameter=14,#
				protectedMethodParameter=15,#
				publicMethodParameter=16,#
				privateConstructorParameter=17,#
				protectedConstructorParameter=18,#
				publicConstructorParameter=19,#
				privateField=20,#
				protectedField=21,#
				publicField=22,#
				private=23,#
				protected=24,#
				public=25#
			)#
label<-c(#
		"project id",#
		"LOC",#
		"number of commits",#
		"age",#
		"all types",#
#
		"local variables",#
		"returns of methods",#
		"parameters of methods",#
		"parameters of constructors",#
		"fields",#
#
		"returns of private methods",#
		"returns of protected methods",#
		"returns of public methods",#
#
		"parameters of private methods",#
		"parameters of protected methods",#
		"parameters of public methods",#
#
		"parameters of private constructors",#
		"parameters of protected constructors",#
		"parameters of public constructors",#
#
		"private fields",#
		"protected fields",#
		"public fields",#
#
		"private fields and methods",#
		"protected fields and methods",#
		"public fields and methods"#
)#
#
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=3, width=7)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in filterColumnsWithData(data, i$localVariable:i$public )) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
# Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			if(i < j) {#
				d_i=data[!is.na(data[,i]),i]#
				d_j=data[!is.na(data[,i]),j]#
				test<-wilcox.test(d_i, d_j, conf.int=T)#
				print(test)#
				p=test$p.value#
				difference=test$conf.int#
				result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
				row=row+1#
			}#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}#
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + #
			geom_boxplot(notch=T) + #
			coord_flip() + #
			labs(y=paste("Use of types in", description), x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
}#
#
filterColumnsWithData<-function(data, columns) {#
	columnsWithData=numeric()#
	for(c in columns) {#
		if(length(data[!is.na(data[, c]), c]) > 1) {#
			columnsWithData <- c(columnsWithData, c)#
		}#
	}#
	columnsWithData#
}#
#
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	columnsWithData<-filterColumnsWithData(data, columnsToCompare)#
	if(length(columnsWithData) > 0) {#
		uTest(data, folder, description, columnsWithData)#
		boxPlot(data, folder, description, columnsWithData)	#
	}#
}#
#
compareAllSamples<-function(data, folder) {#
	print(paste("Processing", folder, "data"))#
	compareSamples(data, folder, "declarations by type",		i$localVariable:i$field)#
	compareSamples(data, folder, "returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples(data, folder, "parameters of methods",		i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples(data, folder, "parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples(data, folder, "fields", 						i$privateField:i$publicField)#
	compareSamples(data, folder, "declarations by visibiltiy", 	i$private:i$public)#
}#
#
analyzeSample<-function(data, description) {#
	plotDeclarationTypeHistogramOfData(data, description)#
	compareAllSamples(data, description)	#
}#
#
boxPlot(data, "all", "all combinations", i$localVariable:i$public)#
boxPlot(matureData, "mature", "all combinations", i$localVariable:i$public)#
boxPlot(nonMatureData, "non-mature", "all combinations", i$localVariable:i$public)#
#
analyzeSample(data, "all")#
#
analyzeSample(matureData, "mature")#
analyzeSample(nonMatureData, "non-mature")#
#
analyzeSample(testData, "test")#
analyzeSample(mainData, "main")#
#
analyzeSample(scriptData, "script")#
analyzeSample(classData, "class")
library(psych)#
library(sm)#
library(ggplot2)#
library(MASS)#
#
setwd("~/workspace_gg/groovonomics/aosd_2014/analysis")#
#
data_all<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
data_tests_all<-read.table("parsed/declaration_by_tests.txt", header=T)#
describe(data_tests)#
#
data_scripts_all<-read.table("parsed/declaration_by_scripts.txt", header=T)#
describe(data_scripts)#
data=data_all#
#
matureData=data[data$loc>2000 & data$commits>100, ]#
nonMatureData=data[data$loc<=2000 | data$commits<=100, ]#
#
testData=data_tests_all[data_tests_all$condition=="test", ]#
mainData=data_tests_all[data_tests_all$condition=="not-test", ]#
#
scriptData=data_scripts_all[data_scripts_all$condition=="script", ]#
classData=data_scripts_all[data_scripts_all$condition=="not-script", ]#
#
i<-data.frame(	#
				projectId=1,#
				loc=2,#
				commits=3,#
				age=4,#
#
				all=5, #
#
				localVariable=6,#
				methodReturn=7,#
				methodParameter=8,#
				constructorParameter=9,#
				field=10,#
				privateMethodReturn=11,#
				protectedMethodReturn=12,#
				publicMethodReturn=13,#
				privateMethodParameter=14,#
				protectedMethodParameter=15,#
				publicMethodParameter=16,#
				privateConstructorParameter=17,#
				protectedConstructorParameter=18,#
				publicConstructorParameter=19,#
				privateField=20,#
				protectedField=21,#
				publicField=22,#
				private=23,#
				protected=24,#
				public=25#
			)#
label<-c(#
		"project id",#
		"LOC",#
		"number of commits",#
		"age",#
		"all types",#
#
		"local variables",#
		"returns of methods",#
		"parameters of methods",#
		"parameters of constructors",#
		"fields",#
#
		"returns of private methods",#
		"returns of protected methods",#
		"returns of public methods",#
#
		"parameters of private methods",#
		"parameters of protected methods",#
		"parameters of public methods",#
#
		"parameters of private constructors",#
		"parameters of protected constructors",#
		"parameters of public constructors",#
#
		"private fields",#
		"protected fields",#
		"public fields",#
#
		"private fields and methods",#
		"protected fields and methods",#
		"public fields and methods"#
)#
#
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=3, width=7)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in filterColumnsWithData(data, i$localVariable:i$public )) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
# Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			if(i < j) {#
				d_i=data[!is.na(data[,i]),i]#
				d_j=data[!is.na(data[,i]),j]#
				test<-wilcox.test(d_i, d_j, conf.int=T)#
				print(test)#
				p=test$p.value#
				difference=test$conf.int#
				result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
				row=row+1#
			}#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}#
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + #
			geom_boxplot(notch=T) + #
			coord_flip() + #
			labs(y=paste("Use of types in", description), x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
}#
#
filterColumnsWithData<-function(data, columns) {#
	columnsWithData=numeric()#
	for(c in columns) {#
		if(length(data[!is.na(data[, c]), c]) > 1) {#
			columnsWithData <- c(columnsWithData, c)#
		}#
	}#
	columnsWithData#
}#
#
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	columnsWithData<-filterColumnsWithData(data, columnsToCompare)#
	if(length(columnsWithData) > 0) {#
		uTest(data, folder, description, columnsWithData)#
		boxPlot(data, folder, description, columnsWithData)	#
	}#
}#
#
compareAllSamples<-function(data, folder) {#
	print(paste("Processing", folder, "data"))#
	compareSamples(data, folder, "declarations by type",		i$localVariable:i$field)#
	compareSamples(data, folder, "returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples(data, folder, "parameters of methods",		i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples(data, folder, "parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples(data, folder, "fields", 						i$privateField:i$publicField)#
	compareSamples(data, folder, "declarations by visibiltiy", 	i$private:i$public)#
}#
#
analyzeSample<-function(data, description) {#
	plotDeclarationTypeHistogramOfData(data, description)#
	compareAllSamples(data, description)	#
}#
#
boxPlot(data, "all", "all combinations", i$localVariable:i$public)#
boxPlot(matureData, "mature", "all combinations", i$localVariable:i$public)#
boxPlot(nonMatureData, "non-mature", "all combinations", i$localVariable:i$public)#
#
analyzeSample(data, "all")#
#
analyzeSample(matureData, "mature")#
analyzeSample(nonMatureData, "non-mature")#
#
analyzeSample(testData, "test")#
analyzeSample(mainData, "main")#
#
analyzeSample(scriptData, "script")#
analyzeSample(classData, "class")
data_background_all<-read.table("parsed/declaration_by_background.txt", header=T)#
str(data_background_all)
groovyBackgroundData=data_background_all[data_scripts_all$condition=="groovy-only", ]#
staticBackgroundData=data_background_all[data_scripts_all$condition=="static-only", ]#
dynamicBackgroundData=data_background_all[data_scripts_all$condition=="dynamic-only", ]#
staticAndDynamicBackgroundData=data_background_all[data_scripts_all$condition=="static-and-dynamic", ]
describe(groovyBackgroundData)
describe(data_background_all)
describe(data)
groovyBackgroundData=data_background_all[data_background_all$condition=="groovy-only", ]#
staticBackgroundData=data_background_all[data_background_all$condition=="static-only", ]#
dynamicBackgroundData=data_background_all[data_background_all$condition=="dynamic-only", ]#
staticAndDynamicBackgroundData=data_background_all[data_background_all$condition=="static-and-dynamic", ]
describe(groovyBackgroundData)
describe(staticBackgroundData)
describe(dynamicBackgroundData)
analyzeSample(groovyBackgroundData, "background/groovy-only")#
analyzeSample(staticBackgroundData, "background/static-only")#
analyzeSample(dynamicBackgroundData, "background/dynamic-only")#
analyzeSample(staticAndDynamicBackgroundData, "background/static-and-dynamic")
analyzeSample(groovyBackgroundData, "background/groovy-only")#
analyzeSample(staticBackgroundData, "background/static-only")#
analyzeSample(dynamicBackgroundData, "background/dynamic-only")#
analyzeSample(staticAndDynamicBackgroundData, "background/static-and-dynamic")
