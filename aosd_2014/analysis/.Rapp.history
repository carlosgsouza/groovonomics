compareSamples<-function(filename, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d=data[!is.na(data[i,])&!is.na(data[j,]),c(i,j)]#
			describe(d)#
			p=wilcox.test(d[,1], d[,2])$p.value#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", filename, ".txt", sep=""))#
}#
#
compareSamples("declaration_type", 3:5)#
compareSamples("method_return_visibility", 6:8)#
compareSamples("method_parameter_visibility", 9:11)
wilcox.test(localVariables[,2], methodReturn[,2])
wilcox.test(localVariable[,2], methodReturn[,2])
compareSamples<-function(filename, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			describe(d)#
			p=wilcox.test(d_i, d_j)$p.value#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", filename, ".txt", sep=""))#
}#
#
compareSamples("declaration_type", 3:5)#
compareSamples("method_return_visibility", 6:8)#
compareSamples("method_parameter_visibility", 9:11)
compareSamples<-function(filename, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			p=wilcox.test(d_i, d_j)$p.value#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", filename, ".txt", sep=""))#
}#
#
compareSamples("declaration_type", 3:5)#
compareSamples("method_return_visibility", 6:8)#
compareSamples("method_parameter_visibility", 9:11)
kruskcal.test(localVariable[,2], methodParameter[,2])
kruskal.test(localVariable[,2], methodParameter[,2])
data<-read.table("parsed/declaration_by_type.txt", header=T)
d<-read.table("parsed/declaration_type_tests.txt", header=T)
d<-read.table("parsed/declaration_type_tests.txt", header=T)
d<-read.table("parsed/declaration_type_tests.txt", header=T)
d<-read.table("parsed/declaration_type_tests.txt", header=T)
d<-read.table("parsed/declaration_type_tests.txt", header=T)
d<-read.table("parsed/declaration_type_tests.txt", header=T)
qplot(overal,data=d)
qplot(overall,data=d)
qplot(overall,data=d, fill=type)
qplot(overall,data=d, facets=type~)
qplot(overall,data=d, facets=type~.)
qplot(localVariable,data=d, facets=type~.)
qplot(methodParameter,data=d, facets=type~.)
qplot(methodReturn,data=d, facets=type~.)
qplot(localVariable,data=d, facets=type~.)
qplot(methodParameter,data=d, facets=type~.)
d<-read.table("parsed/declaration_by_scripts.txt", header=T)
qplot(overall,data=d, facets=type~.)
qplot(localVariable,data=d, facets=type~.)
qplot(methodParameter,data=d, facets=type~.)
d[d$methodParameter=1.0,]
d[d$methodParameter==1.0,]
d[d$methodParameter==1.0,1]
qplot(methodParameter,data=d, facets=type~.)
qplot(overall,data=d, facets=type~.)
data<-read.table("parsed/declaration_by_type.txt", header=T)
describe(data)
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
# Declaration Types#
localVariable=data[!is.na(data$localVariable), c(3,4)]#
methodReturn=data[!is.na(data$methodReturn), c(3,5)]#
methodParameter=data[!is.na(data$methodParameter), c(3,6)]#
#
privateMethodReturn=data[!is.na(data$privateMethodReturn), c(3,7)]#
protectedMethodReturn=data[!is.na(data$protectedMethodReturn), c(3,8)]#
publicMethodReturn=data[!is.na(data$publicMethodReturn), c(3,9)]#
#
privateMethodParameter=data[!is.na(data$privateMethodParameter), c(3,10)]#
protectedMethodParameter=data[!is.na(data$protectedMethodParameter), c(3,11)]#
publicMethodParameter=data[!is.na(data$publicMethodParameter), c(3,12)]#
plotDeclarationTypeHistogram<-function(data, declarationTypeStr){#
	values<-data[,2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")#
compareSamples<-function(filename, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			p=wilcox.test(d_i, d_j)$p.value#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", filename, ".txt", sep=""))#
}#
#
compareSamples("declaration_type", 4:6)#
compareSamples("method_return_visibility", 7:9)#
compareSamples("method_parameter_visibility", 10:12)
data[ data$methodParameter>data$publicMethodParameter & data$methodParameter>data$privateMethodParameter  & data$methodParameter>data$protectedMethodParameter , ]
describe(data[ data$methodParameter>data$publicMethodParameter & data$methodParameter>data$privateMethodParameter  & data$methodParameter>data$protectedMethodParameter , ])
str(data[ data$methodParameter>data$publicMethodParameter & data$methodParameter>data$privateMethodParameter  & data$methodParameter>data$protectedMethodParameter , ])
str(data[ data$methodParameter>data$publicMethodParameter & data$methodParameter>data$privateMethodParameter  & data$methodParameter>data$protectedMethodParameter , c(1,6,10,11,12)])
describe(data)
data[,c(1,6,10,11,12)]
describe(data)
data<-read.table("parsed/declaration_by_type.txt", header=T)
data<-read.table("parsed/declaration_by_type.txt", header=T)
describe(data)
data<-read.table("parsed/declaration_by_type.txt", header=T)
describe(data)
str(data)
data[1,]
data<-read.table("parsed/declaration_by_type.txt", header=T)
data[1,]
data<-read.table("parsed/declaration_by_type.txt", header=T)
describe(data)
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")
Declaration Types#
localVariable=data[!is.na(data$localVariable), c(3,4)]#
methodReturn=data[!is.na(data$methodReturn), c(3,5)]#
methodParameter=data[!is.na(data$methodParameter), c(3,6)]#
#
privateMethodReturn=data[!is.na(data$privateMethodReturn), c(3,7)]#
protectedMethodReturn=data[!is.na(data$protectedMethodReturn), c(3,8)]#
publicMethodReturn=data[!is.na(data$publicMethodReturn), c(3,9)]#
#
privateMethodParameter=data[!is.na(data$privateMethodParameter), c(3,10)]#
protectedMethodParameter=data[!is.na(data$protectedMethodParameter), c(3,11)]#
publicMethodParameter=data[!is.na(data$publicMethodParameter), c(3,12)]#
plotDeclarationTypeHistogram<-function(data, declarationTypeStr){#
	values<-data[,2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")
data[,c(1,6,10,11,12)]
data[,c(1,5,7,8,9)]
data<-data[data$loc>1000, ]
describe(data)
Declaration Types#
localVariable=data[!is.na(data$localVariable), c(3,4)]#
methodReturn=data[!is.na(data$methodReturn), c(3,5)]#
methodParameter=data[!is.na(data$methodParameter), c(3,6)]#
#
privateMethodReturn=data[!is.na(data$privateMethodReturn), c(3,7)]#
protectedMethodReturn=data[!is.na(data$protectedMethodReturn), c(3,8)]#
publicMethodReturn=data[!is.na(data$publicMethodReturn), c(3,9)]#
#
privateMethodParameter=data[!is.na(data$privateMethodParameter), c(3,10)]#
protectedMethodParameter=data[!is.na(data$protectedMethodParameter), c(3,11)]#
publicMethodParameter=data[!is.na(data$publicMethodParameter), c(3,12)]#
plotDeclarationTypeHistogram<-function(data, declarationTypeStr){#
	values<-data[,2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")
data[,c(1,6,10,11,12)]
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
# Declaration Types#
localVariable=data[!is.na(data$localVariable), c(3,4)]#
methodReturn=data[!is.na(data$methodReturn), c(3,5)]#
methodParameter=data[!is.na(data$methodParameter), c(3,6)]#
#
privateMethodReturn=data[!is.na(data$privateMethodReturn), c(3,7)]#
protectedMethodReturn=data[!is.na(data$protectedMethodReturn), c(3,8)]#
publicMethodReturn=data[!is.na(data$publicMethodReturn), c(3,9)]#
#
privateMethodParameter=data[!is.na(data$privateMethodParameter), c(3,10)]#
protectedMethodParameter=data[!is.na(data$protectedMethodParameter), c(3,11)]#
publicMethodParameter=data[!is.na(data$publicMethodParameter), c(3,12)]#
plotDeclarationTypeHistogram<-function(data, declarationTypeStr){#
	values<-data[,2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")
data[,c(1,6,10,11,12)]
data[1:100,c(1,6,10,11,12)]
data[1:1000,c(1,6,10,11,12)]
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)
hist(commits)
hist(data$commits)
hist(log(data$commits))
data[1:1000,c(1,5,7,8,9)]
describe(data)
plotDeclarationTypeHistogram<-function(data, declarationTypeStr){#
	values<-data[,2]/length(data)#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")
values<-data[1:100,2]/length(data)
describe(values)
describe(data[1:100,2]/length(data))
describe(data[1:100,2])
plotDeclarationTypeHistogram<-function(data, declarationTypeStr){#
	values<-data[,2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")
data[1:100]
data[1:100,]
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
# Declaration Types#
localVariable=data[!is.na(data$localVariable), c(3,4)]#
methodReturn=data[!is.na(data$methodReturn), c(3,5)]#
methodParameter=data[!is.na(data$methodParameter), c(3,6)]#
#
privateMethodReturn=data[!is.na(data$privateMethodReturn), c(3,7)]#
protectedMethodReturn=data[!is.na(data$protectedMethodReturn), c(3,8)]#
publicMethodReturn=data[!is.na(data$publicMethodReturn), c(3,9)]#
#
privateMethodParameter=data[!is.na(data$privateMethodParameter), c(3,10)]#
protectedMethodParameter=data[!is.na(data$protectedMethodParameter), c(3,11)]#
publicMethodParameter=data[!is.na(data$publicMethodParameter), c(3,12)]#
plotDeclarationTypeHistogram<-function(data, declarationTypeStr){#
	values<-data[,2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
# Declaration Types#
localVariable=data[!is.na(data$localVariable), c(3,4)]#
methodReturn=data[!is.na(data$methodReturn), c(3,5)]#
methodParameter=data[!is.na(data$methodParameter), c(3,6)]#
#
privateMethodReturn=data[!is.na(data$privateMethodReturn), c(3,7)]#
protectedMethodReturn=data[!is.na(data$protectedMethodReturn), c(3,8)]#
publicMethodReturn=data[!is.na(data$publicMethodReturn), c(3,9)]#
#
privateMethodParameter=data[!is.na(data$privateMethodParameter), c(3,10)]#
protectedMethodParameter=data[!is.na(data$protectedMethodParameter), c(3,11)]#
publicMethodParameter=data[!is.na(data$publicMethodParameter), c(3,12)]#
plotDeclarationTypeHistogram<-function(data, declarationTypeStr){#
	values<-data[,2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
# Declaration Types#
localVariable=data[!is.na(data$localVariable), c(3,4)]#
methodReturn=data[!is.na(data$methodReturn), c(3,5)]#
methodParameter=data[!is.na(data$methodParameter), c(3,6)]#
#
privateMethodReturn=data[!is.na(data$privateMethodReturn), c(3,7)]#
protectedMethodReturn=data[!is.na(data$protectedMethodReturn), c(3,8)]#
publicMethodReturn=data[!is.na(data$publicMethodReturn), c(3,9)]#
#
privateMethodParameter=data[!is.na(data$privateMethodParameter), c(3,10)]#
protectedMethodParameter=data[!is.na(data$protectedMethodParameter), c(3,11)]#
publicMethodParameter=data[!is.na(data$publicMethodParameter), c(3,12)]#
plotDeclarationTypeHistogram<-function(data, declarationTypeStr){#
	values<-data[,2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
# Declaration Types#
localVariable=data[!is.na(data$localVariable), c(3,4)]#
methodReturn=data[!is.na(data$methodReturn), c(3,5)]#
methodParameter=data[!is.na(data$methodParameter), c(3,6)]#
#
privateMethodReturn=data[!is.na(data$privateMethodReturn), c(3,7)]#
protectedMethodReturn=data[!is.na(data$protectedMethodReturn), c(3,8)]#
publicMethodReturn=data[!is.na(data$publicMethodReturn), c(3,9)]#
#
privateMethodParameter=data[!is.na(data$privateMethodParameter), c(3,10)]#
protectedMethodParameter=data[!is.na(data$protectedMethodParameter), c(3,11)]#
publicMethodParameter=data[!is.na(data$publicMethodParameter), c(3,12)]#
plotDeclarationTypeHistogram<-function(data, declarationTypeStr){#
	values<-data[,2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
# Declaration Types#
localVariable=data[!is.na(data$localVariable), c(3,4)]#
methodReturn=data[!is.na(data$methodReturn), c(3,5)]#
methodParameter=data[!is.na(data$methodParameter), c(3,6)]#
#
privateMethodReturn=data[!is.na(data$privateMethodReturn), c(3,7)]#
protectedMethodReturn=data[!is.na(data$protectedMethodReturn), c(3,8)]#
publicMethodReturn=data[!is.na(data$publicMethodReturn), c(3,9)]#
#
privateMethodParameter=data[!is.na(data$privateMethodParameter), c(3,10)]#
protectedMethodParameter=data[!is.na(data$protectedMethodParameter), c(3,11)]#
publicMethodParameter=data[!is.na(data$publicMethodParameter), c(3,12)]#
plotDeclarationTypeHistogram<-function(data, declarationTypeStr){#
	values<-data[,2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")
plotDeclarationTypeHistogram<-function(data, declarationTypeStr){#
	values<-data[,2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.10)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")
describe(data)
describe(data[data$loc>1000,])
hist(data[data$loc>1000,]$methodReturn)
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)
describe(data[data$loc>1000,])
Declaration Types#
localVariable=data[!is.na(data$localVariable), c(3,4)]#
methodReturn=data[!is.na(data$methodReturn), c(3,5)]#
methodParameter=data[!is.na(data$methodParameter), c(3,6)]#
#
privateMethodReturn=data[!is.na(data$privateMethodReturn), c(3,7)]#
protectedMethodReturn=data[!is.na(data$protectedMethodReturn), c(3,8)]#
publicMethodReturn=data[!is.na(data$publicMethodReturn), c(3,9)]#
#
privateMethodParameter=data[!is.na(data$privateMethodParameter), c(3,10)]#
protectedMethodParameter=data[!is.na(data$protectedMethodParameter), c(3,11)]#
publicMethodParameter=data[!is.na(data$publicMethodParameter), c(3,12)]#
plotDeclarationTypeHistogram<-function(data, declarationTypeStr){#
	values<-data[,2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.10)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")
compareSamples<-function(filename, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			p=wilcox.test(d_i, d_j)$p.value#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", filename, ".txt", sep=""))#
}#
#
compareSamples("declaration_type", 4:6)#
compareSamples("method_return_visibility", 7:9)#
compareSamples("method_parameter_visibility", 10:12)
data<-data[data$loc>1000,]
describe(data)#
#
# Declaration Types#
localVariable=data[!is.na(data$localVariable), c(3,4)]#
methodReturn=data[!is.na(data$methodReturn), c(3,5)]#
methodParameter=data[!is.na(data$methodParameter), c(3,6)]#
#
privateMethodReturn=data[!is.na(data$privateMethodReturn), c(3,7)]#
protectedMethodReturn=data[!is.na(data$protectedMethodReturn), c(3,8)]#
publicMethodReturn=data[!is.na(data$publicMethodReturn), c(3,9)]#
#
privateMethodParameter=data[!is.na(data$privateMethodParameter), c(3,10)]#
protectedMethodParameter=data[!is.na(data$protectedMethodParameter), c(3,11)]#
publicMethodParameter=data[!is.na(data$publicMethodParameter), c(3,12)]#
plotDeclarationTypeHistogram<-function(data, declarationTypeStr){#
	values<-data[,2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.10)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")#
compareSamples<-function(filename, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			p=wilcox.test(d_i, d_j)$p.value#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", filename, ".txt", sep=""))#
}#
#
compareSamples("declaration_type", 4:6)#
compareSamples("method_return_visibility", 7:9)#
compareSamples("method_parameter_visibility", 10:12)
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)
data<-data[data$loc>1000,]
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)
Declaration Types#
localVariable=data[!is.na(data$localVariable), c(3,4)]#
methodReturn=data[!is.na(data$methodReturn), c(3,5)]#
methodParameter=data[!is.na(data$methodParameter), c(3,6)]#
#
privateMethodReturn=data[!is.na(data$privateMethodReturn), c(3,7)]#
protectedMethodReturn=data[!is.na(data$protectedMethodReturn), c(3,8)]#
publicMethodReturn=data[!is.na(data$publicMethodReturn), c(3,9)]#
#
privateMethodParameter=data[!is.na(data$privateMethodParameter), c(3,10)]#
protectedMethodParameter=data[!is.na(data$protectedMethodParameter), c(3,11)]#
publicMethodParameter=data[!is.na(data$publicMethodParameter), c(3,12)]#
plotDeclarationTypeHistogram<-function(data, declarationTypeStr){#
	values<-data[,2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.10)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
# Declaration Types#
localVariable=data[!is.na(data$localVariable), c(3,4)]#
methodReturn=data[!is.na(data$methodReturn), c(3,5)]#
methodParameter=data[!is.na(data$methodParameter), c(3,6)]#
#
privateMethodReturn=data[!is.na(data$privateMethodReturn), c(3,7)]#
protectedMethodReturn=data[!is.na(data$protectedMethodReturn), c(3,8)]#
publicMethodReturn=data[!is.na(data$publicMethodReturn), c(3,9)]#
#
privateMethodParameter=data[!is.na(data$privateMethodParameter), c(3,10)]#
protectedMethodParameter=data[!is.na(data$protectedMethodParameter), c(3,11)]#
publicMethodParameter=data[!is.na(data$publicMethodParameter), c(3,12)]#
plotDeclarationTypeHistogram<-function(data, declarationTypeStr){#
	values<-data[,2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.10)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(localVariable, "local variables")#
plotDeclarationTypeHistogram(methodReturn, "returns of methods")#
plotDeclarationTypeHistogram(methodParameter, "parameters of methods")#
plotDeclarationTypeHistogram(privateMethodReturn, "returns of private methods")#
plotDeclarationTypeHistogram(protectedMethodReturn, "returns of protected methods")#
plotDeclarationTypeHistogram(publicMethodReturn, "returns of public methods")#
plotDeclarationTypeHistogram(privateMethodParameter, "parameters of private methods")#
plotDeclarationTypeHistogram(protectedMethodParameter, "parameters of protected methods")#
plotDeclarationTypeHistogram(publicMethodParameter, "parameters of public methods")
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
plotDeclarationTypeHistogram<-function(index, declarationTypeStr){#
	values<-data[!is.na(data$index),2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.10)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(4, "local variables")#
plotDeclarationTypeHistogram(5, "returns of methods")#
plotDeclarationTypeHistogram(6, "parameters of methods")#
plotDeclarationTypeHistogram(7, "returns of private methods")#
plotDeclarationTypeHistogram(8, "returns of protected methods")#
plotDeclarationTypeHistogram(9, "returns of public methods")#
plotDeclarationTypeHistogram(10, "parameters of private methods")#
plotDeclarationTypeHistogram(11, "parameters of protected methods")#
plotDeclarationTypeHistogram(12, "parameters of public methods")
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
plotDeclarationTypeHistogram<-function(index, declarationTypeStr){#
	values<-data[!is.na(data$index),2]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.10)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(4, "local variables")#
plotDeclarationTypeHistogram(5, "returns of methods")#
plotDeclarationTypeHistogram(6, "parameters of methods")#
plotDeclarationTypeHistogram(7, "returns of private methods")#
plotDeclarationTypeHistogram(8, "returns of protected methods")#
plotDeclarationTypeHistogram(9, "returns of public methods")#
plotDeclarationTypeHistogram(10, "parameters of private methods")#
plotDeclarationTypeHistogram(11, "parameters of protected methods")#
plotDeclarationTypeHistogram(12, "parameters of public methods")
plotDeclarationTypeHistogram<-function(index, declarationTypeStr){#
	values<-data[!is.na(data[,index]]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.10)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(4, "local variables")
index<-4#
describe(data[,index])
describe(data[data[,index]<0.5,index])
describe(data[!is.na(data[,index]),index])
plotDeclarationTypeHistogram<-function(index, declarationTypeStr){#
	values<-data[!is.na(data[,index]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.10)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
plotDeclarationTypeHistogram(4, "local variables")
plotDeclarationTypeHistogram<-function(index, declarationTypeStr){#
	values<-data[!is.na(data[,index]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.10)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
plotDeclarationTypeHistogram(4, "local variables")#
plotDeclarationTypeHistogram(5, "returns of methods")#
plotDeclarationTypeHistogram(6, "parameters of methods")#
plotDeclarationTypeHistogram(7, "returns of private methods")#
plotDeclarationTypeHistogram(8, "returns of protected methods")#
plotDeclarationTypeHistogram(9, "returns of public methods")#
plotDeclarationTypeHistogram(10, "parameters of private methods")#
plotDeclarationTypeHistogram(11, "parameters of protected methods")#
plotDeclarationTypeHistogram(12, "parameters of public methods")
plotDeclarationTypeHistogram(13, "public declarations")#
plotDeclarationTypeHistogram(14, "private declarations")#
plotDeclarationTypeHistogram(14, "protected declarations")
compareSamples("visibility", 13:15)
compareSamples("declaration_type", 4:6)#
compareSamples("method_return_visibility", 7:9)#
compareSamples("method_parameter_visibility", 10:12)#
compareSamples("visibility", 13:15)
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)
plotDeclarationTypeHistogram(4, "local variables")#
plotDeclarationTypeHistogram(5, "returns of methods")#
plotDeclarationTypeHistogram(6, "parameters of methods")#
plotDeclarationTypeHistogram(7, "returns of private methods")#
plotDeclarationTypeHistogram(8, "returns of protected methods")#
plotDeclarationTypeHistogram(9, "returns of public methods")#
plotDeclarationTypeHistogram(10, "parameters of private methods")#
plotDeclarationTypeHistogram(11, "parameters of protected methods")#
plotDeclarationTypeHistogram(12, "parameters of public methods")#
plotDeclarationTypeHistogram(13, "public declarations")#
plotDeclarationTypeHistogram(14, "private declarations")#
plotDeclarationTypeHistogram(14, "protected declarations")
compareSamples("declaration_type", 4:6)#
compareSamples("method_return_visibility", 7:9)#
compareSamples("method_parameter_visibility", 10:12)
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
plotDeclarationTypeHistogram<-function(index, declarationTypeStr){#
	values<-data[!is.na(data[,index]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.10)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(4, "local variables")#
plotDeclarationTypeHistogram(5, "returns of methods")#
plotDeclarationTypeHistogram(6, "parameters of methods")#
plotDeclarationTypeHistogram(7, "returns of private methods")#
plotDeclarationTypeHistogram(8, "returns of protected methods")#
plotDeclarationTypeHistogram(9, "returns of public methods")#
plotDeclarationTypeHistogram(10, "parameters of private methods")#
plotDeclarationTypeHistogram(11, "parameters of protected methods")#
plotDeclarationTypeHistogram(12, "parameters of public methods")#
plotDeclarationTypeHistogram(13, "public declarations")#
plotDeclarationTypeHistogram(14, "private declarations")#
plotDeclarationTypeHistogram(14, "protected declarations")#
compareSamples<-function(filename, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			p=wilcox.test(d_i, d_j)$p.value#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", filename, ".txt", sep=""))#
}#
#
compareSamples("declaration_type", 4:6)#
compareSamples("method_return_visibility", 7:9)#
compareSamples("method_parameter_visibility", 10:12)
plotDeclarationTypeHistogram<-function(index, declarationTypeStr){#
	values<-data[!is.na(data[,index]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.09)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(4, "local variables")#
plotDeclarationTypeHistogram(5, "returns of methods")#
plotDeclarationTypeHistogram(6, "parameters of methods")#
plotDeclarationTypeHistogram(7, "returns of private methods")#
plotDeclarationTypeHistogram(8, "returns of protected methods")#
plotDeclarationTypeHistogram(9, "returns of public methods")#
plotDeclarationTypeHistogram(10, "parameters of private methods")#
plotDeclarationTypeHistogram(11, "parameters of protected methods")#
plotDeclarationTypeHistogram(12, "parameters of public methods")#
plotDeclarationTypeHistogram(13, "public declarations")#
plotDeclarationTypeHistogram(14, "private declarations")#
plotDeclarationTypeHistogram(14, "protected declarations")
plotDeclarationTypeHistogram<-function(index, declarationTypeStr){#
	values<-data[!is.na(data[,index]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.12)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(4, "local variables")#
plotDeclarationTypeHistogram(5, "returns of methods")#
plotDeclarationTypeHistogram(6, "parameters of methods")#
plotDeclarationTypeHistogram(7, "returns of private methods")#
plotDeclarationTypeHistogram(8, "returns of protected methods")#
plotDeclarationTypeHistogram(9, "returns of public methods")#
plotDeclarationTypeHistogram(10, "parameters of private methods")#
plotDeclarationTypeHistogram(11, "parameters of protected methods")#
plotDeclarationTypeHistogram(12, "parameters of public methods")
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)
plotDeclarationTypeHistogram(4, "local variables")#
plotDeclarationTypeHistogram(5, "returns of methods")#
plotDeclarationTypeHistogram(6, "parameters of methods")#
plotDeclarationTypeHistogram(7, "returns of private methods")#
plotDeclarationTypeHistogram(8, "returns of protected methods")#
plotDeclarationTypeHistogram(9, "returns of public methods")#
plotDeclarationTypeHistogram(10, "parameters of private methods")#
plotDeclarationTypeHistogram(11, "parameters of protected methods")#
plotDeclarationTypeHistogram(12, "parameters of public methods")
plotDeclarationTypeHistogram<-function(index, declarationTypeStr){#
	values<-data[!is.na(data[,index]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(4, "local variables")#
plotDeclarationTypeHistogram(5, "returns of methods")#
plotDeclarationTypeHistogram(6, "parameters of methods")#
plotDeclarationTypeHistogram(7, "returns of private methods")#
plotDeclarationTypeHistogram(8, "returns of protected methods")#
plotDeclarationTypeHistogram(9, "returns of public methods")#
plotDeclarationTypeHistogram(10, "parameters of private methods")#
plotDeclarationTypeHistogram(11, "parameters of protected methods")#
plotDeclarationTypeHistogram(12, "parameters of public methods")
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)
plotDeclarationTypeHistogram(4, "local variables")
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
plotDeclarationTypeHistogram<-function(index, declarationTypeStr){#
	values<-data[!is.na(data[,index]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path="result/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(4, "all")#
plotDeclarationTypeHistogram(5, "local variables")#
plotDeclarationTypeHistogram(6, "returns of methods")#
plotDeclarationTypeHistogram(7, "parameters of methods")#
plotDeclarationTypeHistogram(8, "returns of private methods")#
plotDeclarationTypeHistogram(9, "returns of protected methods")#
plotDeclarationTypeHistogram(10, "returns of public methods")#
plotDeclarationTypeHistogram(11, "parameters of private methods")#
plotDeclarationTypeHistogram(12, "parameters of protected methods")#
plotDeclarationTypeHistogram(13, "parameters of public methods")
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)
data_scripts<-read.table("parsed/declaration_by_tests.txt", header=T)
describe(data_scripts)
data_scripts<-read.table("parsed/declaration_by_tests.txt", header=T)#
plot<-qplot(overall, data=data_scripts, ylab="Number of projects", binwidth=0.05)
data_scripts<-read.table("parsed/declaration_by_tests.txt", header=T)#
qplot(overall, data=data_scripts, ylab="Number of projects", binwidth=0.05)
data_scripts<-read.table("parsed/declaration_by_tests.txt", header=T)#
qplot(all, data=data_scripts, ylab="Number of projects", binwidth=0.05)
data_scripts<-read.table("parsed/declaration_by_tests.txt", header=T)#
qplot(all, data=data_scripts, ylab="Number of projects", binwidth=0.05, facet=condition~.)
data_scripts<-read.table("parsed/declaration_by_tests.txt", header=T)#
qplot(all, data=data_scripts, ylab="Number of projects", binwidth=0.05, facets=condition~.)
qplot(all, data=data_scripts, ylab="Number of projects", binwidth=0.05, facets=condition~., color=publicMethodReturn)
data_scripts<-read.table("parsed/declaration_by_tests.txt", header=T)#
qplot(all, data=data_scripts, ylab="Number of projects", binwidth=0.05, facets=condition~., fill=publicMethodReturn)
data_scripts<-read.table("parsed/declaration_by_tests.txt", header=T)#
qplot(all, data=data_scripts, ylab="Number of projects", binwidth=0.05, facets=condition~.)
data_scripts<-read.table("parsed/declaration_by_tests.txt", header=T)#
qplot(methodReturn, data=data_scripts, ylab="Number of projects", binwidth=0.05, facets=condition~.)
data_scripts<-read.table("parsed/declaration_by_tests.txt", header=T)#
qplot(methodReturn, data=data_scripts, ylab="Number of projects", binwidth=0.05, facets=condition~.)
data_scripts<-read.table("parsed/declaration_by_tests.txt", header=T)#
qplot(localVariable, data=data_scripts, ylab="Number of projects", binwidth=0.05, facets=condition~.)
data_tests<-read.table("parsed/declaration_by_tests.txt", header=T)#
data_scripts<-read.table("parsed/declaration_by_scripts.txt", header=T)
wilcox.test( data_tests[data_tests$condition=="test",data_tests$localVariable], data_tests[data_tests$condition!="test",data_tests$localVariable] )
desribe(data_tests)
describe(data_tests)
wilcox.test( data_tests[data_tests$condition=="test",5], data_tests[data_tests$condition!="test",5] )
describe( data_tests[data_tests$condition=="test",5], data_tests[data_tests$condition!="test",5] )
describe( data_tests[data_tests$condition=="test",5]) ; describe(data_tests[data_tests$condition!="test",5] )
desribe(data$condition)
describe(data$condition)
str(data_test$condition)
describe(data_tests$condition)
str(data_tests$condition)
hist(data_tests$condition)
summary(data_tests$condition)
summary(data_scripts$condition)
data_background<-read.table("parsed/declaration_by_background.txt", header=T)
summary(data_background)
describe(data_background)
summary(data_background$condition)
data_background<-read.table("parsed/declaration_by_background.txt", header=T)
summary(data_background$condition)
qplot(all, data=data_background, ylab="Number of projects", binwidth=0.05, fill=condition)
qplot(all, data=data_background, ylab="Number of projects", binwidth=0.05, facets=condition~.)
data_background<-read.table("parsed/declaration_by_background.txt", header=T)#
qplot(all, data=data_background, ylab="Number of projects", binwidth=0.05, facets=condition~.)
data_background<-read.table("parsed/declaration_by_background.txt", header=T)#
qplot(localVariable, data=data_background, ylab="Number of projects", binwidth=0.05, facets=condition~.)
data_background<-read.table("parsed/declaration_by_background.txt", header=T)#
qplot(methodParameter, data=data_background, ylab="Number of projects", binwidth=0.05, facets=condition~.)
data_background<-read.table("parsed/declaration_by_background.txt", header=T)#
qplot(methodReturn, data=data_background, ylab="Number of projects", binwidth=0.05, facets=condition~.)
cor(data[!is.na(data$localVariable), c(1,3)])
cor(data[!is.na(data$localVariable), c(2,3)])
cor(data[!is.na(data$localVariable), c(2,4)])#
cor(data[!is.na(data$localVariable), c(3,4)])
cor(data[!is.na(data$localVariable), c(2,5)])#
cor(data[!is.na(data$localVariable), c(3,5)])
cor(data[!is.na(data$all), c(2,4)])#
cor(data[!is.na(data$all), c(3,4)])
cor(data[!is.na(data$publicMethodParameter), c(2,13)])#
cor(data[!is.na(data$publicMethodParameter), c(3,13)])
cor(data[!is.na(data$publicMethodParameter), c(2,3,13)])
cor(data[!is.na(data$publicMethodParameter), c(2,3,13)], method="spearman")
describe(data)
for(i in 4:13) {#
	filteredData = data[ !is.na(data[, i]), ]#
	describe(filteredData)#
	#cor( data[,2]#
	#data[!is.na(data$localVariable)&!is.na(data$methodParameter)&!is.na(data$methodReturn), 3:5])#
}
for(i in 4:13) {#
	filteredData = data[ !is.na(data[, i]), ]#
	print(describe(filteredData))#
	#cor( data[,2]#
	#data[!is.na(data$localVariable)&!is.na(data$methodParameter)&!is.na(data$methodReturn), 3:5])#
}
for(i in 4:13) {#
	filteredData = data[ !is.na(data[, i]), ]#
	print(cor( data[,2], data[, i], method="spearman"))#
	#data[!is.na(data$localVariable)&!is.na(data$methodParameter)&!is.na(data$methodReturn), 3:5])#
}
for(i in 4:13) {#
	filteredData = data[ !is.na(data[, i]), ]#
	print(cor( filteredData[,2], filteredData[, i], method="spearman"))#
}
corLOC = data.frame(declaration=character(0), coefficient=numeric(0))#
corCommits = data.frame(declaration=character(0), coefficient=numeric(0))#
#
for(i in 4:13) {#
	filteredData=data[ !is.na(data[, i]), ]#
	declarationType=colnames(data)[i]#
	rank=cor(filteredData[,2], filteredData[, i], method="spearman")#
	rbind(corLOC, data.frame(declarationType, rank))#
}#
#
print(corLOC)
corLOC = data.frame(declaration=character(0), coefficient=numeric(0))#
corCommits = data.frame(declaration=character(0), coefficient=numeric(0))#
#
for(i in 4:13) {#
	filteredData=data[ !is.na(data[, i]), ]#
	declarationType=colnames(data)[i]#
	rank=cor(filteredData[,2], filteredData[, i], method="spearman")#
	corLOC=rbind(corLOC, data.frame(declarationType, rank))#
}#
#
print(corLOC)
corLOC = data.frame(declaration=character(0), coefficient=numeric(0))#
corCommits = data.frame(declaration=character(0), coefficient=numeric(0))#
#
for(i in 4:13) {#
	filteredData=data[ !is.na(data[, i]), ]#
	declarationType=colnames(data)[i]#
	rankLOC=cor(filteredData[,2], filteredData[, i], method="spearman")#
	rankCommits=cor(filteredData[,2], filteredData[, i], method="spearman")#
	corLOC=rbind(corLOC, data.frame(declarationType, rankLOC))#
	corCommits=rbind(corCommits, data.frame(declarationType, rankCommits))#
}#
#
print(corLOC)#
print(corCommits)
corLOC = data.frame(declaration=character(0), coefficient=numeric(0))#
corCommits = data.frame(declaration=character(0), coefficient=numeric(0))#
#
for(i in 4:13) {#
	filteredData=data[ !is.na(data[, i]), ]#
	declarationType=colnames(data)[i]#
	rankLOC=cor(filteredData[,2], filteredData[, i], method="spearman")#
	rankCommits=cor(filteredData[,3], filteredData[, i], method="spearman")#
	corLOC=rbind(corLOC, data.frame(declarationType, rankLOC))#
	corCommits=rbind(corCommits, data.frame(declarationType, rankCommits))#
}#
#
print(corLOC)#
print(corCommits)
Corrrelation between declarations and size#
correlateLOCandCommits=function() {#
	corLOC = data.frame(declaration=character(0), coefficient=numeric(0))#
	corCommits = data.frame(declaration=character(0), coefficient=numeric(0))#
#
	for(i in 4:13) {#
		filteredData=data[ !is.na(data[, i]), ]#
		declarationType=colnames(data)[i]#
		rankLOC=cor(filteredData[,2], filteredData[, i], method="spearman")#
		rankCommits=cor(filteredData[,3], filteredData[, i], method="spearman")#
		corLOC=rbind(corLOC, data.frame(declarationType, rankLOC))#
		corCommits=rbind(corCommits, data.frame(declarationType, rankCommits))#
	}#
#
	print(corLOC)#
	write.matrix(corLOC ,"result/spearman/loc.txt")#
	print(corCommits)#
	write.matrix(corCommits ,"result/spearman/commits.txt")#
}#
correlateLOCandCommits()
Corrrelation between declarations and size#
correlateLOCandCommits=function() {#
	corLOC = data.frame(declaration=character(0), coefficient=numeric(0))#
	corCommits = data.frame(declaration=character(0), coefficient=numeric(0))#
#
	for(i in 4:13) {#
		filteredData=data[ !is.na(data[, i]), ]#
		declarationType=colnames(data)[i]#
		rankLOC=cor(filteredData[,2], filteredData[, i], method="spearman")#
		rankCommits=cor(filteredData[,3], filteredData[, i], method="spearman")#
		corLOC=rbind(corLOC, data.frame(declarationType, rankLOC))#
		corCommits=rbind(corCommits, data.frame(declarationType, rankCommits))#
	}#
#
	print(corLOC)#
	write.matrix(corLOC ,"result/correlation/loc.txt")#
	print(corCommits)#
	write.matrix(corCommits ,"result/correlation/commits.txt")#
}#
correlateLOCandCommits()
matureData=data[data$loc>2000 & data$commits>1000]
matureData=data[data$loc>2000 & data$commits>1000, ]
describe(data)
describe(matureData)
matureData=data[data$loc>2000 | data$commits>1000, ]
describe(matureData)
matureData=data[data$loc>2000 | data$commits>100, ]
describe(matureData)
matureData=data[data$loc>2000 & data$commits>100, ]#
describe(matureData)
matureData=data[data$loc>2000 & data$commits>100, ]#
nonMatureData=data[data$loc<=2000 | data$commits<=100, ]#
describe(matureData)#
#
compareMatureProjectsToOthers=function() {#
	result = data.frame(declaration=character(0), pvalue=numeric(0))#
#
	for(i in 4:13) {#
		md = matureData[!is.na(matureData[,i]), i]#
		nmd = nonMatureData[!is.na(nonMatureData[,i]), i]#
		declarationType=colnames(data)[i]#
		p=wilcox.test(md, nmd)$p.value#
		print(declarationType)#
		print(p)#
	}#
}#
#
compareMatureProjectsToOthers()
matureData=data[data$loc>2000 & data$commits>100, ]#
nonMatureData=data[data$loc<=2000 | data$commits<=100, ]#
#
compareMatureProjectsToOthers=function() {#
	result = data.frame(declaration=character(0), pvalue=numeric(0))#
#
	for(i in 4:13) {#
		md = matureData[!is.na(matureData[,i]), i]#
		nmd = nonMatureData[!is.na(nonMatureData[,i]), i]#
		declarationType=colnames(data)[i]#
		p=wilcox.test(md, nmd)$p.value#
		result <- rbind(result, declarationType, p))#
	}#
	write.matrix(corCommits ,"result/u-test/mature_and_others.txt")#
}#
#
compareMatureProjectsToOthers()
Mature Data Analysis#
matureData=data[data$loc>2000 & data$commits>100, ]#
nonMatureData=data[data$loc<=2000 | data$commits<=100, ]#
#
compareMatureProjectsToOthers=function() {#
	result = data.frame(declaration=character(0), pvalue=numeric(0))#
#
	for(i in 4:13) {#
		md = matureData[!is.na(matureData[,i]), i]#
		nmd = nonMatureData[!is.na(nonMatureData[,i]), i]#
		declarationType=colnames(data)[i]#
		p=wilcox.test(md, nmd)$p.value#
		result <- rbind(result, declarationType, p))#
	}#
	write.matrix(corCommits ,"result/u-test/mature_and_others.txt")#
}#
#
compareMatureProjectsToOthers()
compareMatureProjectsToOthers=function() {#
	result = data.frame(declaration=character(0), pvalue=numeric(0))#
#
	for(i in 4:13) {#
		md = matureData[!is.na(matureData[,i]), i]#
		nmd = nonMatureData[!is.na(nonMatureData[,i]), i]#
		declarationType=colnames(data)[i]#
		p=wilcox.test(md, nmd)$p.value#
		result <- rbind(result, declarationType, p)#
	}#
	write.matrix(corCommits ,"result/u-test/mature_and_others.txt")#
}#
#
compareMatureProjectsToOthers()
compareMatureProjectsToOthers=function() {#
	result = data.frame(declaration=character(0), pvalue=numeric(0))#
#
	for(i in 4:13) {#
		md = matureData[!is.na(matureData[,i]), i]#
		nmd = nonMatureData[!is.na(nonMatureData[,i]), i]#
		declarationType=colnames(data)[i]#
		p=wilcox.test(md, nmd)$p.value#
		print(declarationType)#
		print(p)#
		result <- rbind(result, declarationType, p)#
	}#
	write.matrix(corCommits ,"result/u-test/mature_and_others.txt")#
}#
#
compareMatureProjectsToOthers()
compareMatureProjectsToOthers=function() {#
	result = data.frame(declaration=character(0), pvalue=numeric(0))#
#
	for(i in 4:13) {#
		md = matureData[!is.na(matureData[,i]), i]#
		nmd = nonMatureData[!is.na(nonMatureData[,i]), i]#
		declarationType=colnames(data)[i]#
		p=wilcox.test(md, nmd)$p.value#
		print(declarationType)#
		print(p)#
		result <- rbind(result, declarationType, p)#
	}#
	write.matrix(result ,"result/u-test/mature_and_others.txt")#
}#
#
compareMatureProjectsToOthers()
compareMatureProjectsToOthers=function() {#
	result = data.frame(declaration=character(0), pvalue=numeric(0))#
#
	for(i in 4:13) {#
		md = matureData[!is.na(matureData[,i]), i]#
		nmd = nonMatureData[!is.na(nonMatureData[,i]), i]#
		declarationType=colnames(data)[i]#
		p=wilcox.test(md, nmd)$p.value#
		print(declarationType)#
		print(p)#
		result <- rbind(result, declration=declarationType, pvalue=p)#
	}#
	write.matrix(result ,"result/u-test/mature_and_others.txt")#
}#
#
compareMatureProjectsToOthers()
compareMatureProjectsToOthers=function() {#
	result = data.frame(declaration=character(0), pvalue=numeric(0))#
#
	for(i in 4:13) {#
		md = matureData[!is.na(matureData[,i]), i]#
		nmd = nonMatureData[!is.na(nonMatureData[,i]), i]#
		declarationType=colnames(data)[i]#
		p=wilcox.test(md, nmd)$p.value#
		print(declarationType)#
		print(p)#
		result <- rbind(result, declration=declarationType, pvalue=p)#
		print(result)#
	}#
	write.matrix(result ,"result/u-test/mature_and_others.txt")#
}#
#
compareMatureProjectsToOthers()
describe(result)
compareMatureProjectsToOthers=function() {#
	result = data.frame(declaration=character(0), pvalue=numeric(0))#
#
	for(i in 4:13) {#
		md = matureData[!is.na(matureData[,i]), i]#
		nmd = nonMatureData[!is.na(nonMatureData[,i]), i]#
		declarationType=colnames(data)[i]#
		p=wilcox.test(md, nmd)$p.value#
		print(declarationType)#
		print(p)#
		result <- rbind(result, declration=declarationType, pvalue=p)#
		describe(result)#
	}#
	write.matrix(result ,"result/u-test/mature_and_others.txt")#
}#
#
compareMatureProjectsToOthers()
compareMatureProjectsToOthers=function() {#
	result = data.frame(declaration=character(0), pvalue=numeric(0))#
#
	for(i in 4:13) {#
		md = matureData[!is.na(matureData[,i]), i]#
		nmd = nonMatureData[!is.na(nonMatureData[,i]), i]#
		declarationType=colnames(data)[i]#
		p=wilcox.test(md, nmd)$p.value#
		print(declarationType)#
		print(p)#
		result <- rbind(result, declration=declarationType, pvalue=p)#
		summary(result)#
	}#
	write.matrix(result ,"result/u-test/mature_and_others.txt")#
}#
#
compareMatureProjectsToOthers()
compareMatureProjectsToOthers=function() {#
	result = data.frame(declaration=character(0), pvalue=numeric(0))#
#
	for(i in 4:13) {#
		md = matureData[!is.na(matureData[,i]), i]#
		nmd = nonMatureData[!is.na(nonMatureData[,i]), i]#
		declarationType=colnames(data)[i]#
		p=wilcox.test(md, nmd)$p.value#
		print(declarationType)#
		print(p)#
		result <- rbind(result, data.frame(declration=declarationType, pvalue=p))#
	}#
	write.matrix(result ,"result/u-test/mature_and_others.txt")#
}#
#
compareMatureProjectsToOthers()
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
plotDeclarationTypeHistogram<-function(index, declarationTypeStr){#
	values<-data[!is.na(data[,index]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path="result/histograms/", filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogram(4, "all declarations")#
plotDeclarationTypeHistogram(5, "local variables")#
plotDeclarationTypeHistogram(6, "returns of methods")#
plotDeclarationTypeHistogram(7, "parameters of methods")#
plotDeclarationTypeHistogram(8, "returns of private methods")#
plotDeclarationTypeHistogram(9, "returns of protected methods")#
plotDeclarationTypeHistogram(10, "returns of public methods")#
plotDeclarationTypeHistogram(11, "parameters of private methods")#
plotDeclarationTypeHistogram(12, "parameters of protected methods")#
plotDeclarationTypeHistogram(13, "parameters of public methods")
data_tests<-read.table("parsed/declaration_by_tests.txt", header=T)#
data_scripts<-read.table("parsed/declaration_by_scripts.txt", header=T)
data_background<-read.table("parsed/declaration_by_background.txt", header=T)#
qplot(methodReturn, data=data_background, ylab="Number of projects", binwidth=0.05, facets=condition~.)
qplot(all, data=data_tests, ylab="Number of projects", binwidth=0.05, facets=condition~.)
qplot(all, data=data_tests, ylab="Number of projects", binwidth=0.05, facets=condition~.)
data_tests<-read.table("parsed/declaration_by_tests.txt", header=T)#
qplot(localVariable, data=data_tests, ylab="Number of projects", binwidth=0.05, facets=condition~.)
describe(data_tests)
data_scripts<-read.table("parsed/declaration_by_scripts.txt", header=T)
qplot(localVariable, data=data_scripts, ylab="Number of projects", binwidth=0.05, facets=condition~.)
qplot(all, data=data_scripts, ylab="Number of projects", binwidth=0.05, facets=condition~.)
qplot(localVariable, data=data_scripts, ylab="Number of projects", binwidth=0.05, facets=condition~.)
qplot(methodReturn, data=data_background, ylab="Number of projects", binwidth=0.05, facets=condition~.)
qplot(all, data=data_background, ylab="Number of projects", binwidth=0.05, facets=condition~.)
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
matureData=data[data$loc>2000 & data$commits>100, ]#
nonMatureData=data[data$loc<=2000 | data$commits<=100, ]#
#
plotDeclarationTypeHistogram<-function(data, folder, index, declarationTypeStr){#
	values<-data[!is.na(data[,index]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path=paste("result/histogram/", folder, sep=""), filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	plotDeclarationTypeHistogram(data, folder, 4, "all declarations")#
	plotDeclarationTypeHistogram(data, folder, 5, "local variables")#
	plotDeclarationTypeHistogram(data, folder, 6, "returns of methods")#
	plotDeclarationTypeHistogram(data, folder, 7, "parameters of methods")#
	plotDeclarationTypeHistogram(data, folder, 8, "returns of private methods")#
	plotDeclarationTypeHistogram(data, folder, 9, "returns of protected methods")#
	plotDeclarationTypeHistogram(data, folder, 10, "returns of public methods")#
	plotDeclarationTypeHistogram(data, folder, 11, "parameters of private methods")#
	plotDeclarationTypeHistogram(data, folder, 12, "parameters of protected methods")#
	plotDeclarationTypeHistogram(data, folder, 13, "parameters of public methods")#
}#
plotDeclarationTypeHistogramOfData<-function(data, "all")
plotDeclarationTypeHistogramOfData<-function(data, "all")
plotDeclarationTypeHistogramOfData<-function(data, "all")
plotDeclarationTypeHistogramOfData(data, "all")
plotDeclarationTypeHistogram<-function(data, folder, index, declarationTypeStr){#
	values<-data[!is.na(data[,index]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path=paste("result/histogram/", folder, sep=""), filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	plotDeclarationTypeHistogram(data, folder, 4, "all declarations")#
	plotDeclarationTypeHistogram(data, folder, 5, "local variables")#
	plotDeclarationTypeHistogram(data, folder, 6, "returns of methods")#
	plotDeclarationTypeHistogram(data, folder, 7, "parameters of methods")#
	plotDeclarationTypeHistogram(data, folder, 8, "returns of private methods")#
	plotDeclarationTypeHistogram(data, folder, 9, "returns of protected methods")#
	plotDeclarationTypeHistogram(data, folder, 10, "returns of public methods")#
	plotDeclarationTypeHistogram(data, folder, 11, "parameters of private methods")#
	plotDeclarationTypeHistogram(data, folder, 12, "parameters of protected methods")#
	plotDeclarationTypeHistogram(data, folder, 13, "parameters of public methods")#
}#
plotDeclarationTypeHistogramOfData(data, "all")#
plotDeclarationTypeHistogramOfData(matureData, "mature")#
plotDeclarationTypeHistogramOfData(nonMatureData, "non-mature")
plotDeclarationTypeHistogram<-function(data, folder, index, declarationTypeStr){#
	values<-data[!is.na(data[,index]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path=paste("result/histogram/", folder, sep=""), filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	plotDeclarationTypeHistogram(data, folder, 4, "all declarations")#
	plotDeclarationTypeHistogram(data, folder, 5, "local variables")#
	plotDeclarationTypeHistogram(data, folder, 6, "returns of methods")#
	plotDeclarationTypeHistogram(data, folder, 7, "parameters of methods")#
	plotDeclarationTypeHistogram(data, folder, 8, "returns of private methods")#
	plotDeclarationTypeHistogram(data, folder, 9, "returns of protected methods")#
	plotDeclarationTypeHistogram(data, folder, 10, "returns of public methods")#
	plotDeclarationTypeHistogram(data, folder, 11, "parameters of private methods")#
	plotDeclarationTypeHistogram(data, folder, 12, "parameters of protected methods")#
	plotDeclarationTypeHistogram(data, folder, 13, "parameters of public methods")#
}#
plotDeclarationTypeHistogramOfData(data, "all")#
plotDeclarationTypeHistogramOfData(matureData, "mature")#
plotDeclarationTypeHistogramOfData(nonMatureData, "non-mature")
plotDeclarationTypeHistogram<-function(data, folder, index, declarationTypeStr){#
	values<-data[!is.na(data[,index]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}
plotDeclarationTypeHistogram<-function(data, folder, index, declarationTypeStr){#
	values<-data[!is.na(data[,index]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path=paste("result/histogram/", folder, sep=""), filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	plotDeclarationTypeHistogram(data, folder, 4, "all declarations")#
	plotDeclarationTypeHistogram(data, folder, 5, "local variables")#
	plotDeclarationTypeHistogram(data, folder, 6, "returns of methods")#
	plotDeclarationTypeHistogram(data, folder, 7, "parameters of methods")#
	plotDeclarationTypeHistogram(data, folder, 8, "returns of private methods")#
	plotDeclarationTypeHistogram(data, folder, 9, "returns of protected methods")#
	plotDeclarationTypeHistogram(data, folder, 10, "returns of public methods")#
	plotDeclarationTypeHistogram(data, folder, 11, "parameters of private methods")#
	plotDeclarationTypeHistogram(data, folder, 12, "parameters of protected methods")#
	plotDeclarationTypeHistogram(data, folder, 13, "parameters of public methods")#
}#
plotDeclarationTypeHistogramOfData(data, "all")#
plotDeclarationTypeHistogramOfData(matureData, "mature")#
plotDeclarationTypeHistogramOfData(nonMatureData, "non-mature")
plotDeclarationTypeHistogram<-function(data, folder, index, declarationTypeStr){#
	values<-data[!is.na(data[,index]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.05)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste("histogram_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	plotDeclarationTypeHistogram(data, folder, 4, "all declarations")#
	plotDeclarationTypeHistogram(data, folder, 5, "local variables")#
	plotDeclarationTypeHistogram(data, folder, 6, "returns of methods")#
	plotDeclarationTypeHistogram(data, folder, 7, "parameters of methods")#
	plotDeclarationTypeHistogram(data, folder, 8, "returns of private methods")#
	plotDeclarationTypeHistogram(data, folder, 9, "returns of protected methods")#
	plotDeclarationTypeHistogram(data, folder, 10, "returns of public methods")#
	plotDeclarationTypeHistogram(data, folder, 11, "parameters of private methods")#
	plotDeclarationTypeHistogram(data, folder, 12, "parameters of protected methods")#
	plotDeclarationTypeHistogram(data, folder, 13, "parameters of public methods")#
}#
plotDeclarationTypeHistogramOfData(data, "all")#
plotDeclarationTypeHistogramOfData(matureData, "mature")#
plotDeclarationTypeHistogramOfData(nonMatureData, "non-mature")
Uses Mann Whitney tests to compare if two samples are equal#
compareSamples<-function(filename, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			test<-wilcox.test(d_i, d_j)#
			print(test)#
			p=test$p.value#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", filename, ".txt", sep=""))#
}#
#
compareSamples("declaration_type", 5:7)#
compareSamples("method_return_visibility", 8:10)#
compareSamples("method_parameter_visibility", 11:13)
Uses Mann Whitney tests to compare if two samples are equal#
compareSamples<-function(filename, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			test<-wilcox.test(d_i, d_j)#
			str(test)#
			p=test$p.value#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", filename, ".txt", sep=""))#
}#
#
compareSamples("declaration_type", 5:7)
Uses Mann Whitney tests to compare if two samples are equal#
compareSamples<-function(filename, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			test<-wilcox.test(d_i, d_j)#
			print(test$conf.int)#
			p=test$p.value#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", filename, ".txt", sep=""))#
}#
#
compareSamples("declaration_type", 5:7)
Uses Mann Whitney tests to compare if two samples are equal#
compareSamples<-function(filename, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			test<-wilcox.test(d_i, d_j)#
			print(test$conf.level)#
			p=test$p.value#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", filename, ".txt", sep=""))#
}#
#
compareSamples("declaration_type", 5:7)
Uses Mann Whitney tests to compare if two samples are equal#
compareSamples<-function(filename, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			test<-wilcox.test(d_i, d_j, conf.int=T)#
			print(test)#
			p=test$p.value#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", filename, ".txt", sep=""))#
}#
#
compareSamples("declaration_type", 5:7)
index=4
data[!is.na(data[,index]),index]
wilcox.test(data[!is.na(data[,index]),index], conf.int=T)
index=5
wilcox.test(data[!is.na(data[,index]),index], conf.int=T)
describe(data[!is.na(data[,index]),index])
describe(data)
describe(data[!is.na(data[,index]),index])
lv=data[!is.na(data[,index]),index]
describe(lv)
wilcox.test(lv)
wilcox.test(lv, conf.int=T)
lvm=matureData[!is.na(matureData[,index]),index]
wilcox.test(lv, lvm, conf.int=T)
