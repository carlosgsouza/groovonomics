2+2
package.install("psych")
install.packages("psych")
clear
5Ë†5
5^5
v=c(1, 2, 34, 5,  "a")
v
d=data.frame(id=1:5, gender=c(2, 2, 3, 41, 0))
d
view(d)
View(d)
edit(d)
d
View(d)
edit(d)
getwd()
install.packages(sm)
install.packages("sm")
search()
install.packages("sm")
search()
defaults write org.R-project.R force.LANG en_US.UTF-8
getwd()
data<-read.table("minutes.txt")
describe(data)
library(psych)#
library(sm)#
library(ggplot2)#
library(MASS)
describe(data)
qplot(data, binwidth=5)
qplot(data[,1], binwidth=5)
data<-read.table("minutes.txt")
qplot(data[,1], binwidth=5)
data<-read.table("minutes.txt")
qplot(data[,1], binwidth=5)
data<-read.table("minutes.txt")
qplot(data[,1], binwidth=5)
library(psych)#
library(sm)#
library(ggplot2)#
library(MASS)#
#
setwd("~/workspace_gg/groovonomics/aosd_2014/analysis")#
#
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
matureData=data[data$loc>2000 & data$commits>100, ]#
nonMatureData=data[data$loc<=2000 | data$commits<=100, ]#
#
declarationDataRange=5:24#
#
i<-data.frame(	#
				projectId=1,#
				loc=2,#
				commits=3,#
				age=4,#
#
				all=4, #
#
				localVariable=5,#
				methodReturn=6,#
				methodParameter=7,#
				field=8,#
				constructorParameter=9,#
				privateMethodReturn=10,#
				protectedMethodReturn=11,#
				publicMethodReturn=12,#
				privateField=13,#
				protectedField=14,#
				publicField=15,#
				privateMethodParameter=16,#
				protectedMethodParameter=17,#
				publicMethodParameter=18,#
				privateConstructorParameter=19,#
				protectedConstructorParameter=20,#
				publicConstructorParameter=21,#
				public=22,#
				private=23,#
				protected=24#
			)#
label<-c(#
		"project id",#
		"LOC",#
		"number of commits",#
		"age",#
		"all types",#
#
		"local variables",#
		"returns of methods",#
		"parameters of methods",#
		"fields",#
		"parameters of constructors",#
#
		"returns of private methods",#
		"returns of protected methods",#
		"returns of public methods",#
#
		"private fields",#
		"protected fields",#
		"public fields",#
#
		"parameters of private methods",#
		"parameters of protected methods",#
		"parameters of public methods",#
#
		"parameters of private constructors",#
		"parameters of protected constructors",#
		"parameters of public constructors",#
#
		"public fields and methods",#
		"private fields and methods",#
		"protected fields and methods"#
)#
#
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in declarations of ",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in declarationDataRange) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
plotDeclarationTypeHistogramOfData(data, "all")
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),index]#
	plot<-qplot(values, xlab=paste("Usage of types in declarations of",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in declarationDataRange) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
plotDeclarationTypeHistogramOfData(data, "all")#
plotDeclarationTypeHistogramOfData(matureData, "mature")#
plotDeclarationTypeHistogramOfData(nonMatureData, "non-mature")
index=5
declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),index]
ggplot(values)
ggplot(values, aes(x=declarationTypeStr)) + geom_histogram(binwidth=0.1)
ggplot(data, aes(x=localVariable)) + geom_histogram(binwidth=0.1)
qplot(values, xlab=paste("Usage of types in declarations of",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.1)
qplot(values, xlab=paste("Usage of types in declarations of",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.1)
describe(na.omit(data))
values<-data[!is.na(data[,index]),]
dexribe(values)
describe(values)
index
ggplot(data, aes(x=all)) + geom_histogram(binwidth=0.1)
ggplot(values, aes(x=all)) + geom_histogram(binwidth=0.1)
ggplot(values, aes_string(x=all)) + geom_histogram(binwidth=0.1)
ggplot(values, aes_string(x="all")) + geom_histogram(binwidth=0.1)
ggplot(values, aes_string(x="all")) + geom_histogram(binwidth=0.1)
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[i]#
 	ggplot(values, aes_string(x=colname)) + geom_histogram(binwidth=0.1)#
	# plot<-qplot(values, xlab=paste("Usage of types in declarations of",  declarationTypeStr, "per project"), ylab="Number of projects", binwidth=0.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}
declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[i]#
 	ggplot(values, aes_string(x=colname)) + geom_histogram(binwidth=0.1)
colname<-colnames(data)[index]
ggplot(values, aes_string(x=colname)) + geom_histogram(binwidth=0.1)
ggplot(values, aes_string(x=colname)) + geom_histogram(binwidth=0.1) + geom_smooth()
ggplot(values, aes_string(x=colname)) + geom_histogram(binwidth=0.1) + ylab("Number of projects")
ggplot(values, aes_string(x=colname)) + geom_histogram(binwidth=0.1) + ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))
ggplot(values, aes_string(x=colname)) #
 		+ geom_histogram(binwidth=0.1) #
 		+ ylab("Number of projects") #
 		+ xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))#
 		+ theme_bw()
ggplot(values, aes_string(x=colname)) #
 		+ geom_histogram(binwidth=0.1) #
 		+ labs(y="Number of projects", x=paste("Usage of types in declarations of",  declarationTypeStr, "per project"))
ggplot(values, aes_string(x=colname)) #
 		+ geom_histogram(binwidth=0.1) #
 		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))#
 		+ geom_vline(aes(xintercept=mean(rating, na.rm=T)), color="red", linetype="dashed", size=1)
ggplot(values, aes_string(x=colname)) #
 		+ geom_histogram(binwidth=0.1) #
 		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))#
 		+ geom_vline(aes(xintercept=mean(colname, na.rm=T)), color="red", linetype="dashed", size=1)
ggplot(values, aes_string(x=colname)) #
 		+ geom_histogram(binwidth=0.1) #
 		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))#
 		+ geom_vline(aes(xintercept=mean(all, na.rm=T)), color="red", linetype="dashed", size=1)
ggplot(values, aes_string(x=colname)) #
 		+ geom_histogram(binwidth=0.1) #
 		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))#
 		+ geom_vline(#
 			aes(xintercept=mean(all, na.rm=T)), #
 			color="red", linetype="dashed", size=1)
ggplot(values, aes_string(x=colname)) #
 		+ geom_histogram(binwidth=0.1) #
 		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))#
 		+ geom_vline(aes(xintercept=mean(all, na.rm=T)))
ggplot(values, aes_string(x=colname)) #
 		+ geom_histogram(binwidth=0.1) #
 		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))#
 		+ geom_vline(aes(xintercept=0.5))
ggplot(values, aes_string(x=colname)) #
 		+ geom_histogram(binwidth=0.1) #
 		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))#
 		+ geom_vline()
ggplot(values, aes_string(x=colname)) #
 		+ geom_histogram(binwidth=0.1) #
 		 		+ geom_vline(aes(xintercept=0.5))#
 		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))
ggplot(values, aes_string(x=colname)) #
 		+ geom_histogram(binwidth=0.1) #
 		 		+ geom_vline(aes(xintercept=0.5))
ggplot(values, aes_string(x=colname))  		+ geom_vline(aes(xintercept=0.5))
ggplot(values, aes_string(x=colname)) #
 		+ geom_histogram(binwidth=0.1)
ggplot(values, aes_string(x=colname))
ggplot(values, aes_string(x=colname)) + geom_histogram(binwidth=0.1)
ggplot(values, aes_string(x=colname)) 		+ geom_histogram(binwidth=0.1)  		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))		+ geom_vline(aes(xintercept=mean(colname, na.rm=T)), color="red", linetype="dashed", size=1)
ggplot(values, aes_string(x=colname)) 		+ geom_histogram(binwidth=0.1)  		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))		+ geom_vline(aes(xintercept=mean(all, na.rm=T)), color="red", linetype="dashed", size=1)
ggplot(values, aes_string(x=colname)) 		+ geom_histogram(binwidth=0.1)  		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))		+ geom_vline(aes(xintercept=mean, color="red", linetype="dashed", size=1)
"
;
1
asd
result
ggplot(values, aes_string(x=colname)) 		+ geom_histogram(binwidth=0.1)  		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))		+ geom_vline(aes(xintercept=mean), color="red", linetype="dashed", size=1)
class(mean)
str(mean)
mean
mean<-mean(data[!is.na(data[,index]),index])
mean
ggplot(values, aes_string(x=colname)) 		+ geom_histogram(binwidth=0.1)  		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))		+ geom_vline(aes(xintercept=mean), color="red", linetype="dashed", size=1)
ggplot(values, aes_string(x=colname)) 		+ geom_histogram(binwidth=0.1)  		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))		+ geom_vline(aes(xintercept=mean), color="grey", linetype="dashed", size=1)
ggplot(values, aes_string(x=colname)) 		+ geom_histogram(binwidth=0.05)  		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))		+ geom_vline(aes(xintercept=mean), color="grey", linetype="dashed", size=1)
index=6
declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	mean<-mean(data[!is.na(data[,index]),index])#
 	colname<-colnames(data)[index]#
 	ggplot(values, aes_string(x=colname)) 		+ geom_histogram(binwidth=0.05)  		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))		+ geom_vline(aes(xintercept=mean), color="grey", linetype="dashed", size=1)
ggplot(values, aes_string(x=colname)) + #
 	geom_histogram(binwidth=0.05)  		+ ylab("Number of projects") + xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project"))		+ geom_vline(aes(xintercept=mean), color="grey", linetype="dashed", size=1)
ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		geom_vline(aes(xintercept=mean), color="grey", linetype="dashed", size=1) +#
 		xlim(0,1)
ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		geom_vline(aes(xintercept=mean), color="grey", linetype="dashed", size=1) +#
 		xlim(0,2)
ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		geom_vline(aes(xintercept=mean), color="grey", linetype="dashed", size=1) +#
 		xlim(0,1.1)
ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		geom_vline(aes(xintercept=mean), color="grey", linetype="dashed", size=1) +#
 		xlim(0,1.1)
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	mean<-mean(data[!is.na(data[,index]),index])#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		geom_vline(aes(xintercept=mean), color="grey", linetype="dashed", size=1) +#
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in declarationDataRange) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
plotDeclarationTypeHistogramOfData(data, "all")#
plotDeclarationTypeHistogramOfData(matureData, "mature")#
plotDeclarationTypeHistogramOfData(nonMatureData, "non-mature")
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in declarationDataRange) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
plotDeclarationTypeHistogramOfData(data, "all")#
plotDeclarationTypeHistogramOfData(matureData, "mature")#
plotDeclarationTypeHistogramOfData(nonMatureData, "non-mature")
ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10, scale0.2)
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10, scale0.2)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in declarationDataRange) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
plotDeclarationTypeHistogramOfData(data, "all")
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=4, width=10, scale=0.2)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in declarationDataRange) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
plotDeclarationTypeHistogramOfData(data, "all")
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=2, width=5)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in declarationDataRange) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
plotDeclarationTypeHistogramOfData(data, "all")
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=3, width=8)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in declarationDataRange) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
plotDeclarationTypeHistogramOfData(data, "all")
declarationDataRange=5:5#
#
i<-data.frame(	#
				projectId=1,#
				loc=2,#
				commits=3,#
				age=4,#
#
				all=4, #
#
				localVariable=5,#
				methodReturn=6,#
				methodParameter=7,#
				field=8,#
				constructorParameter=9,#
				privateMethodReturn=10,#
				protectedMethodReturn=11,#
				publicMethodReturn=12,#
				privateField=13,#
				protectedField=14,#
				publicField=15,#
				privateMethodParameter=16,#
				protectedMethodParameter=17,#
				publicMethodParameter=18,#
				privateConstructorParameter=19,#
				protectedConstructorParameter=20,#
				publicConstructorParameter=21,#
				public=22,#
				private=23,#
				protected=24#
			)#
label<-c(#
		"project id",#
		"LOC",#
		"number of commits",#
		"age",#
		"all types",#
#
		"local variables",#
		"returns of methods",#
		"parameters of methods",#
		"fields",#
		"parameters of constructors",#
#
		"returns of private methods",#
		"returns of protected methods",#
		"returns of public methods",#
#
		"private fields",#
		"protected fields",#
		"public fields",#
#
		"parameters of private methods",#
		"parameters of protected methods",#
		"parameters of public methods",#
#
		"parameters of private constructors",#
		"parameters of protected constructors",#
		"parameters of public constructors",#
#
		"public fields and methods",#
		"private fields and methods",#
		"protected fields and methods"#
)#
#
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=3, width=7)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in declarationDataRange) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
plotDeclarationTypeHistogramOfData(data, "all")
declarationDataRange=5:24#
#
i<-data.frame(	#
				projectId=1,#
				loc=2,#
				commits=3,#
				age=4,#
#
				all=4, #
#
				localVariable=5,#
				methodReturn=6,#
				methodParameter=7,#
				field=8,#
				constructorParameter=9,#
				privateMethodReturn=10,#
				protectedMethodReturn=11,#
				publicMethodReturn=12,#
				privateField=13,#
				protectedField=14,#
				publicField=15,#
				privateMethodParameter=16,#
				protectedMethodParameter=17,#
				publicMethodParameter=18,#
				privateConstructorParameter=19,#
				protectedConstructorParameter=20,#
				publicConstructorParameter=21,#
				public=22,#
				private=23,#
				protected=24#
			)#
label<-c(#
		"project id",#
		"LOC",#
		"number of commits",#
		"age",#
		"all types",#
#
		"local variables",#
		"returns of methods",#
		"parameters of methods",#
		"fields",#
		"parameters of constructors",#
#
		"returns of private methods",#
		"returns of protected methods",#
		"returns of public methods",#
#
		"private fields",#
		"protected fields",#
		"public fields",#
#
		"parameters of private methods",#
		"parameters of protected methods",#
		"parameters of public methods",#
#
		"parameters of private constructors",#
		"parameters of protected constructors",#
		"parameters of public constructors",#
#
		"public fields and methods",#
		"private fields and methods",#
		"protected fields and methods"#
)#
#
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=3, width=7)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in declarationDataRange) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
plotDeclarationTypeHistogramOfData(data, "all")#
plotDeclarationTypeHistogramOfData(matureData, "mature")#
plotDeclarationTypeHistogramOfData(nonMatureData, "non-mature")
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
matureData=data[data$loc>2000 & data$commits>100, ]#
nonMatureData=data[data$loc<=2000 | data$commits<=100, ]#
#
declarationDataRange=5:25#
#
i<-data.frame(	#
				projectId=1,#
				loc=2,#
				commits=3,#
				age=4,#
#
				all=5, #
#
				localVariable=6,#
				methodReturn=7,#
				methodParameter=8,#
				constructorParameter=9,#
				field=10,#
				privateMethodReturn=11,#
				protectedMethodReturn=12,#
				publicMethodReturn=13,#
				privateMethodParameter=14,#
				protectedMethodParameter=15,#
				publicMethodParameter=16,#
				privateConstructorParameter=17,#
				protectedConstructorParameter=18,#
				publicConstructorParameter=19,#
				privateField=20,#
				protectedField=21,#
				publicField=22,#
				public=23,#
				private=24,#
				protected=25#
			)#
label<-c(#
		"project id",#
		"LOC",#
		"number of commits",#
		"age",#
		"all types",#
#
		"local variables",#
		"returns of methods",#
		"parameters of methods",#
		"parameters of constructors",#
		"fields",#
#
		"returns of private methods",#
		"returns of protected methods",#
		"returns of public methods",#
#
		"parameters of private methods",#
		"parameters of protected methods",#
		"parameters of public methods",#
#
		"parameters of private constructors",#
		"parameters of protected constructors",#
		"parameters of public constructors",#
#
		"private fields",#
		"protected fields",#
		"public fields",#
#
		"public fields and methods",#
		"private fields and methods",#
		"protected fields and methods"#
)#
#
plotDeclarationTypeHistogram<-function(data, folder, index){#
	declarationTypeStr<-label[index]#
 	values<-data[!is.na(data[,index]),]#
 	colname<-colnames(data)[index]#
 	plot<-ggplot(values, aes_string(x=colname)) + #
 		geom_histogram(binwidth=0.05) + #
 		ylab("Number of projects") + #
 		xlab(paste("Usage of types in declarations of",  declarationTypeStr, "per project")) + #
 		xlim(0,1.1)#
	ggsave(path=paste("result/histograms/", folder, sep=""), filename=paste(index, "_", gsub(" ", "_", declarationTypeStr), ".png", sep=""), plot, height=3, width=7)#
}#
#
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(it in declarationDataRange) {#
		print(it)#
		plotDeclarationTypeHistogram(data, folder, it )		#
	}#
}#
plotDeclarationTypeHistogramOfData(data, "all")#
plotDeclarationTypeHistogramOfData(matureData, "mature")#
plotDeclarationTypeHistogramOfData(nonMatureData, "non-mature")
i<-data.frame(	#
				projectId=1,#
				loc=2,#
				commits=3,#
				age=4,#
#
				all=5, #
#
				localVariable=6,#
				methodReturn=7,#
				methodParameter=8,#
				constructorParameter=9,#
				field=10,#
				privateMethodReturn=11,#
				protectedMethodReturn=12,#
				publicMethodReturn=13,#
				privateMethodParameter=14,#
				protectedMethodParameter=15,#
				publicMethodParameter=16,#
				privateConstructorParameter=17,#
				protectedConstructorParameter=18,#
				publicConstructorParameter=19,#
				privateField=20,#
				protectedField=21,#
				publicField=22,#
				private=23,#
				protected=24,#
				public=25#
			)#
range<-data.frame(#
					all=i$localVariable:i$public,#
					declarationType=i$locarlVariable:i$field,#
					methodReturn=i$privateMethodReturn:i$publicMethodReturn,#
					methodParameter=i$privateMethodParameter:i$publicMethodParameter,#
					constructorParameter=i$privateConstructorParameter:i$publicConstructorParameter,#
					field=i$privateField:i$publicField,#
					declarationVisibility=i$public:i$protected#
				)#
rangeLabel<-data.frame(#
						"all combinations",#
						"declaration by type",#
						"returns of methods",#
						"parameters of methods",#
						"parameters of constructors",#
						"fields",#
						"declarations by visibiltiy"#
					)#
label<-c(#
		"project id",#
		"LOC",#
		"number of commits",#
		"age",#
		"all types",#
#
		"local variables",#
		"returns of methods",#
		"parameters of methods",#
		"parameters of constructors",#
		"fields",#
#
		"returns of private methods",#
		"returns of protected methods",#
		"returns of public methods",#
#
		"parameters of private methods",#
		"parameters of protected methods",#
		"parameters of public methods",#
#
		"parameters of private constructors",#
		"parameters of protected constructors",#
		"parameters of public constructors",#
#
		"private fields",#
		"protected fields",#
		"public fields",#
#
		"private fields and methods",#
		"protected fields and methods",#
		"public fields and methods"#
)
compareAllSamples<-function() {#
	for(r in range) {#
		print(range)#
	}#
}#
compareAllSamples()
compareAllSamples<-function() {#
	compareSamples("declaration_type", range$all)#
}#
compareAllSamples()
Uses Mann Whitney tests to compare if two samples are equal#
compareSamples<-function(filename, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			test<-wilcox.test(d_i, d_j, conf.int=T)#
			print(test)#
			p=test$p.value#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", filename, ".txt", sep=""))#
}#
#
compareSamples("declaration_type", 5:9)#
compareSamples("method_return_visibility", 10:12)#
compareSamples("method_return_visibility", 10:12)#
compareSamples("method_parameter_visibility", 11:13)#
#
compareAllSamples<-function() {#
	compareSamples("declaration_type", range$all)#
}#
compareAllSamples()
compareAllSamples<-function() {#
	compareSamples("declaration_type", range$all)#
}#
compareAllSamples()
range$all
range
compareAllSamples<-function() {#
	compareSamples("declaration_type", i$localVariable:i$field)#
}#
compareAllSamples()
Uses Mann Whitney tests to compare if two samples are equal#
compareSamples<-function(description, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			test<-wilcox.test(d_i, d_j, conf.int=T)#
			print(test)#
			p=test$p.value#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", gsub(" ", "_", description), ".txt", sep=""))#
}#
#
compareAllSamples<-function() {#
	compareSamples("all combinations", 				i$localVariable:i$public)#
	compareSamples("declaration by type",			i$localVariable:i$field)#
	compareSamples("returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples("parameters of methods",			i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples("parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples("fields", 						i$privateField:i$publicField)#
	compareSamples("declarations by visibiltiy", 	i$private:i$public)#
}#
compareAllSamples()
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(description, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			test<-wilcox.test(d_i, d_j, conf.int=T)#
			print(test)#
			p=test$p.value#
			difference=test$conf.int#
			print(difference)#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", gsub(" ", "_", description), ".txt", sep=""))#
}#
#
compareSamples<-function(description, columnsToCompare) {#
	uTest(description, columnsToCompare)#
}
compareSamples("fields", 						i$privateField:i$publicField)
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(description, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			test<-wilcox.test(d_i, d_j, conf.int=T)#
			print(test)#
			p=test$p.value#
			difference=test$conf.int#
			print(class(difference))#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", gsub(" ", "_", description), ".txt", sep=""))#
}#
#
compareSamples("fields", 						i$privateField:i$publicField)
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(description, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			test<-wilcox.test(d_i, d_j, conf.int=T)#
			print(test)#
			p=test$p.value#
			difference=test$conf.int#
			print(class(difference))#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p, difference=difference))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", gsub(" ", "_", description), ".txt", sep=""))#
}
compareSamples("fields", 						i$privateField:i$publicField)
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(description, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			test<-wilcox.test(d_i, d_j, conf.int=T)#
			print(test)#
			p=test$p.value#
			difference=test$conf.int#
			print(difference)#
			print(class(difference))#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p, difference=difference))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", gsub(" ", "_", description), ".txt", sep=""))#
}
compareSamples("declarations by visibiltiy", 	i$private:i$public)
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(description, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),c(i)]#
			d_j=data[!is.na(data[j,]),c(j)]#
			test<-wilcox.test(d_i, d_j, conf.int=T)#
			print(test)#
			p=test$p.value#
			difference=test$conf.int#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p, difference=difference))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", gsub(" ", "_", description), ".txt", sep=""))#
}#
#
compareSamples<-function(description, columnsToCompare) {#
	uTest(description, columnsToCompare)#
}#
#
compareAllSamples<-function() {#
	compareSamples("all combinations", 				i$localVariable:i$public)#
	compareSamples("declaration by type",			i$localVariable:i$field)#
	compareSamples("returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples("parameters of methods",			i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples("parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples("fields", 						i$privateField:i$publicField)#
	compareSamples("declarations by visibiltiy", 	i$private:i$public)#
}#
compareAllSamples()
ggplot(mtcars, aes(factor(cyl), mpg))
ggplot(mtcars, aes(factor(cyl), mpg)) + geom_boxplot()
ggplot(data, aes(all)) + geom_boxplot()
ggplot(data, aes(all, loc)) + geom_boxplot()
i=i$private
j=i$public
i=23
j=25
d_i=data[!is.na(data[i,]),i]#
			d_j=data[!is.na(data[j,]),j]
describe(d_i)
describe(d_j)
uTest<-function(description, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),i]#
			d_j=data[!is.na(data[j,]),j]#
			test<-wilcox.test(d_i, d_j, conf.int=T)#
			print(test)#
			p=test$p.value#
			difference=test$conf.int#
			print(difference[0])#
			print(difference[1])#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p, difference=difference))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", gsub(" ", "_", description), ".txt", sep=""))#
}
compareSamples("declarations by visibiltiy", 	i$private:i$public)
i<-data.frame(	#
				projectId=1,#
				loc=2,#
				commits=3,#
				age=4,#
#
				all=5, #
#
				localVariable=6,#
				methodReturn=7,#
				methodParameter=8,#
				constructorParameter=9,#
				field=10,#
				privateMethodReturn=11,#
				protectedMethodReturn=12,#
				publicMethodReturn=13,#
				privateMethodParameter=14,#
				protectedMethodParameter=15,#
				publicMethodParameter=16,#
				privateConstructorParameter=17,#
				protectedConstructorParameter=18,#
				publicConstructorParameter=19,#
				privateField=20,#
				protectedField=21,#
				publicField=22,#
				private=23,#
				protected=24,#
				public=25#
			)
compareSamples("fields", 						i$privateField:i$publicField)
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(description, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),i]#
			d_j=data[!is.na(data[j,]),j]#
			test<-wilcox.test(d_i, d_j, conf.int=T)#
			print(test)#
			p=test$p.value#
			difference=test$conf.int#
			print(difference[0])#
			print(difference[1])#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p, difference=difference))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", gsub(" ", "_", description), ".txt", sep=""))#
}
compareSamples("fields", 						i$privateField:i$publicField)
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(description, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), ci.min=numeric(0), ci.max=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),i]#
			d_j=data[!is.na(data[j,]),j]#
			test<-wilcox.test(d_i, d_j, conf.int=T)#
			print(test)#
			p=test$p.value#
			difference=test$conf.int#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p, ci.min=difference[0], ci.max=difference[1]))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", gsub(" ", "_", description), ".txt", sep=""))#
}#
#
compareSamples<-function(description, columnsToCompare) {#
	uTest(description, columnsToCompare)#
}
compareSamples("declarations by visibiltiy", 	i$private:i$public)
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(description, columnsToCompare) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columnsToCompare) { #
		for(j in columnsToCompare) { #
			d_i=data[!is.na(data[i,]),i]#
			d_j=data[!is.na(data[j,]),j]#
			test<-wilcox.test(d_i, d_j, conf.int=T)#
			print(test)#
			p=test$p.value#
			difference=test$conf.int#
			result <- rbind(result, data.frame(colnames(data)[i], colnames(data)[j], pvalue=p, difference=difference))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", gsub(" ", "_", description), ".txt", sep=""))#
}
compareSamples("fields", 						i$privateField:i$publicField)
data.frame(label="public", value=c(0.1, 0.2, 0.3))
data.frame(label="public", value=c(0.1, 0.2, 0.3)) + data.frame(label="private", value=c(0.1, 0.2, 0.5))
pub=data.frame(label="public", value=c(0.1, 0.2, 0.3))
pri=data.frame(label="private", value=c(1, 2, 3))
merge(pub, pri)
rbind(pub, pri)
boxPlot<-function(columns) {#
	for(c in columns) {#
		print(c)	#
	}#
}#
boxPlot(i$private:i$public)
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=c, data[c, ]) )#
	}#
	describe(d)#
}#
boxPlot(i$private:i$public)
data[23, ]
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=c, data[, c]) )#
	}#
	describe(d)#
}#
boxPlot(i$private:i$public)
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=c, data[, c]) )#
	}#
	str(d)#
}#
boxPlot(i$private:i$public)
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=colnames(data)[c], data[, c]) )#
	}#
	str(d)#
}#
boxPlot(i$private:i$public)
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=colnames(data)[c], data[, c]) )#
	}#
	describe(d$label)#
}#
boxPlot(i$private:i$public)
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=colnames(data)[c], data[, c]) )#
	}#
	str(d$label)#
}#
boxPlot(i$private:i$public)
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=colnames(data)[c], data[, c]) )#
	}#
	return d#
}#
d=boxPlot(i$private:i$public)
d
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=colnames(data)[c], data[, c]) )#
	}#
	return d#
}#
d=boxPlot(i$private:i$public)
d
describe(d)
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=colnames(data)[c], data[, c]) )#
	}#
	d#
}#
d=boxPlot(i$private:i$public)
d
describe(d$label)
str(d$label)
qplot(d)
qplot(value, data=d)
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=colnames(data)[c], data[!is.na(data[c]), c]) )#
	}#
	d#
}#
d=boxPlot(i$private:i$public)
describe(d$value)
describe(d)
qplot(value, data=d)
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=colnames(data)[c], value=data[!is.na(data[c]), c]) )#
	}#
	d#
}#
d=boxPlot(i$private:i$public)
describe(d)
qplot(value, data=d)
qplot(value, data=d, facets=~.label)
qplot(label, value, data=d)
ggplot(d, aes(label, value)) + geom_boxplot()
ggplot(d, aes(label, value, fill=label)) + geom_boxplot()
ggplot(d, aes(label, value, outlier.size=0)) + geom_boxplot()
ggplot(d, aes(label, value, outlier.size=1000)) + geom_boxplot()
ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0)
d
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=colnames(data)[c], value=data[!is.na(data[c]), c]) )#
	}#
	ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0)#
}#
d=boxPlot(i$localVariable:i$public)
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=colnames(data)[c], value=data[!is.na(data[c]), c]) )#
	}#
	ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0)#
}#
boxPlot(i$localVariable:i$public)
data<-read.table("parsed/declaration_by_type.txt", header=T)#
describe(data)#
#
matureData=data[data$loc>2000 & data$commits>100, ]#
nonMatureData=data[data$loc<=2000 | data$commits<=100, ]#
#
i<-data.frame(	#
				projectId=1,#
				loc=2,#
				commits=3,#
				age=4,#
#
				all=5, #
#
				localVariable=6,#
				methodReturn=7,#
				methodParameter=8,#
				constructorParameter=9,#
				field=10,#
				privateMethodReturn=11,#
				protectedMethodReturn=12,#
				publicMethodReturn=13,#
				privateMethodParameter=14,#
				protectedMethodParameter=15,#
				publicMethodParameter=16,#
				privateConstructorParameter=17,#
				protectedConstructorParameter=18,#
				publicConstructorParameter=19,#
				privateField=20,#
				protectedField=21,#
				publicField=22,#
				private=23,#
				protected=24,#
				public=25#
			)#
label<-c(#
		"project id",#
		"LOC",#
		"number of commits",#
		"age",#
		"all types",#
#
		"local variables",#
		"returns of methods",#
		"parameters of methods",#
		"parameters of constructors",#
		"fields",#
#
		"returns of private methods",#
		"returns of protected methods",#
		"returns of public methods",#
#
		"parameters of private methods",#
		"parameters of protected methods",#
		"parameters of public methods",#
#
		"parameters of private constructors",#
		"parameters of protected constructors",#
		"parameters of public constructors",#
#
		"private fields",#
		"protected fields",#
		"public fields",#
#
		"private fields and methods",#
		"protected fields and methods",#
		"public fields and methods"#
)
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=colnames(data)[c], value=data[!is.na(data[c]), c]) )#
	}#
	ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0)#
}#
boxPlot(i$localVariable:i$public)
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=colnames(data)[c], value=data[!is.na(data[c]), c]) )#
	}#
	ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0)#
}#
boxPlot(i$localVariable:i$methodReturn)
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=colnames(data)[c], value=data[!is.na(data[c]), c]) )#
	}#
	ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0)#
	d#
}#
d=boxPlot(i$localVariable:i$methodReturn)
ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0) + coordFlip()
ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0) + coord_flip()
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0)#
	d#
}#
d=boxPlot(i$localVariable:i$methodReturn)
ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0) + coord_flip()
ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=10) + coord_flip()
ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=100) + coord_flip()
ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0) + coord_flip() + labs(x="Use of types in declarations")
ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0) + coord_flip() + labs(x="Use of types in declarations")
ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0) + labs(x="Use of types in declarations")
boxPlot<-function(columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=10)#
	d#
}#
d=boxPlot(i$localVariable:i$field)
ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0) + labs(x="Use of types in declarations")
ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0) + coord_flip() + labs(x="Use of types in declarations")
ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0) + coord_flip() + labs(y="Use of types in declarations")
ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0) + coord_flip() + labs(y="Use of types in declarations", x=""")
"
ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=0) + coord_flip() + labs(y="Use of types in declarations", x="")
ggplot(d, aes(label, value)) + geom_boxplot() + coord_flip() + labs(y="Use of types in declarations", x="")
ggplot(d, aes(label, value)) + geom_boxplot(notch=T) + coord_flip() + labs(y="Use of types in declarations", x="")
plot<-ggplot(d, aes(label, value)) + geom_boxplot(notch=T) + coord_flip() + labs(y="Use of types in declarations", x="")
folder="all"
boxPlot<-function(columns, description) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=10)#
	folder<-"all"#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=4)#
}#
boxPlot("declarations by visibiltiy", 	i$private:i$public)
boxPlot<-function(description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=10)#
	folder<-"all"#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=4)#
}#
boxPlot("declarations by visibiltiy", 	i$private:i$public)
boxPlot<-function(description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + geom_boxplot(outlier.size=10)#
	folder<-"all"#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=4)#
}#
boxPlot("declarations by visibiltiy", 	i$private:i$public)
boxPlot<-function(description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + geom_boxplot(notch=T) + coord_flip() + labs(y="Use of types in declarations", x="")#
	folder<-"all"#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=4)#
}#
boxPlot("declarations by visibiltiy", 	i$private:i$public)
boxPlot<-function(description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + geom_boxplot(notch=T) + coord_flip() + labs(y="Use of types in declarations", x="")#
	folder<-"all"#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7)#
}#
boxPlot("declarations by visibiltiy", 	i$private:i$public)
boxPlot<-function(description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + geom_boxplot(notch=T) + coord_flip() + labs(y="Use of types in declarations", x="")#
	folder<-"all"#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7)#
}#
#
compareSamples<-function(description, columnsToCompare) {#
	# uTest(description, columnsToCompare)#
	boxPlot(description, columnsToCompare)#
}#
#
compareAllSamples<-function() {#
	compareSamples("all combinations", 				i$localVariable:i$public)#
	compareSamples("declaration by type",			i$localVariable:i$field)#
	compareSamples("returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples("parameters of methods",			i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples("parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples("fields", 						i$privateField:i$publicField)#
	compareSamples("declarations by visibiltiy", 	i$private:i$public)#
}#
compareAllSamples()
(1:3).size()
size(1:3)
class(1:3)
count(1:3)
length(1:3)
boxPlot<-function(description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + geom_boxplot(notch=T) + coord_flip() + labs(y="Use of types in declarations", x="")#
	folder<-"all"#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
}#
#
compareSamples<-function(description, columnsToCompare) {#
	# uTest(description, columnsToCompare)#
	boxPlot(description, columnsToCompare)#
}#
#
compareAllSamples<-function() {#
	compareSamples("all combinations", 				i$localVariable:i$public)#
	compareSamples("declaration by type",			i$localVariable:i$field)#
	compareSamples("returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples("parameters of methods",			i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples("parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples("fields", 						i$privateField:i$publicField)#
	compareSamples("declarations by visibiltiy", 	i$private:i$public)#
}#
compareAllSamples()
for(t in c("a", "b", "c")) { print(t) }
plotDeclarationTypeHistogramOfData<-function(data, folder){#
	for(r in 1:nrow(subsets)) {#
		label<-subsets[i, 1]#
		subset<-subsets[i, 2]#
		for(it in declarationDataRange) {#
			print(it)#
			plotDeclarationTypeHistogram(subset, label, it )		#
		}#
	}#
}#
plotDeclarationTypeHistogramOfData()
subsets <- data.frame(label=c("all", "mature", "non-mature"), data=c(data, matureData, nonMatureData))
subsets <- data.frame(label=c("all", "mature", "non-mature"), data=v(data, matureData, nonMatureData))
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + geom_boxplot(notch=T) + coord_flip() + labs(y="Use of types in declarations", x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
}#
#
compareSamples<-function(data, folder, description, columnsToCompare) {#
	# uTest(description, columnsToCompare)#
	boxPlot(data, folder, description, columnsToCompare)#
}#
#
compareAllSamples<-function(data, folder) {#
	compareSamples(data, folder, "all combinations", 			i$localVariable:i$public)#
	compareSamples(data, folder, "declaration by type",			i$localVariable:i$field)#
	compareSamples(data, folder, "returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples(data, folder, "parameters of methods",		i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples(data, folder, "parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples(data, folder, "fields", 						i$privateField:i$publicField)#
	compareSamples(data, folder, "declarations by visibiltiy", 	i$private:i$public)#
}#
#
compareAllSamples(data, "all")#
compareAllSamples(matureData, "mature")#
compareAllSamples(nonMatureData, "non-mature")
boxPlot<-function(data, folder, description, columns) {#
	print(paste("Plotting boxplot of", description))#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + geom_boxplot(notch=T) + coord_flip() + labs(y="Use of types in declarations", x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
}#
#
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", folder, "data"))#
	# uTest(description, columnsToCompare)#
	boxPlot(data, folder, description, columnsToCompare)#
}#
#
compareAllSamples<-function(data, folder) {#
	compareSamples(data, folder, "all combinations", 			i$localVariable:i$public)#
	compareSamples(data, folder, "declaration by type",			i$localVariable:i$field)#
	compareSamples(data, folder, "returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples(data, folder, "parameters of methods",		i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples(data, folder, "parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples(data, folder, "fields", 						i$privateField:i$publicField)#
	compareSamples(data, folder, "declarations by visibiltiy", 	i$private:i$public)#
}#
#
compareAllSamples(data, "all")#
compareAllSamples(matureData, "mature")#
compareAllSamples(nonMatureData, "non-mature")
Uses Mann Whitney tests to compare if two samples are equal#
uTest<-function(data, folder, description, columns) {#
	result = data.frame(sample1=character(0), sample2=character(0), pvalue=numeric(0), difference=numeric(0))#
	row = 1#
	for(i in columns) { #
		for(j in columns) { #
			d_i=data[!is.na(data[i,]),i]#
			d_j=data[!is.na(data[j,]),j]#
			test<-wilcox.test(d_i, d_j, conf.int=T)#
			print(test)#
			p=test$p.value#
			difference=test$conf.int#
			result <- rbind(result, data.frame(sample1=colnames(data)[i], sample2=colnames(data)[j], pvalue=p, difference=difference))#
			row=row+1#
		}#
	}#
	write.matrix(result ,file=paste("result/u-test/", folder, "/", gsub(" ", "_", description), ".txt", sep=""))#
}#
boxPlot<-function(data, folder, description, columns) {#
	d <- data.frame(label=character(0), value=numeric(0))#
	for(c in columns) {#
		d <- rbind( d, data.frame(label=label[c], value=data[!is.na(data[c]), c]) )#
	}#
	plot<-ggplot(d, aes(label, value)) + geom_boxplot(notch=T) + coord_flip() + labs(y="Use of types in declarations", x="")#
	ggsave(path=paste("result/boxplots/", folder, sep=""), filename=paste(columns, "_", gsub(" ", "_", description), ".png", sep=""), plot, width=7, height=length(columns))#
}#
#
compareSamples<-function(data, folder, description, columnsToCompare) {#
	print(paste("Comparing samples of", description))#
	uTest(data, folder, description, columnsToCompare)#
	boxPlot(data, folder, description, columnsToCompare)#
}#
#
compareAllSamples<-function(data, folder) {#
	print(paste("Processing", folder, "data"))#
	compareSamples(data, folder, "all combinations", 			i$localVariable:i$public)#
	compareSamples(data, folder, "declaration by type",			i$localVariable:i$field)#
	compareSamples(data, folder, "returns of methods",			i$privateMethodReturn:i$publicMethodReturn)#
	compareSamples(data, folder, "parameters of methods",		i$privateMethodParameter:i$publicMethodParameter)#
	compareSamples(data, folder, "parameters of constructors",	i$privateConstructorParameter:i$publicConstructorParameter)#
	compareSamples(data, folder, "fields", 						i$privateField:i$publicField)#
	compareSamples(data, folder, "declarations by visibiltiy", 	i$private:i$public)#
}#
#
compareAllSamples(data, "all")#
compareAllSamples(matureData, "mature")#
compareAllSamples(nonMatureData, "non-mature")
