Abstract

One of the most important features to be taken into account when 
choosing a programming language is its typing system, static or 
dynamic. This question has become increasingly more important due 
to the recent popularization of dynamic languages such as Ruby 
and JavaScript. This paper studies which are the most influencing 
factors for a programmer when choosing between typing systems. An 
analysis of the source code of over seven thousand projects written 
in Groovy, a programming language where one can choose, for each 
declaration, either to type it or not, shows in which situations 
programmers prefer a typing system over the other. Results of 
this study suggest that the previous experience of the 
programmer, project size, complexity of modules, scope and 
visibility of statements are some of the most important factors 
in this decision.


1 Introduction

When choosing a programming language for a project, a
developer should consider several features of that
language, one of the most important being its typing system.
This, which can be static or dynamic, defines when the type 
of a statement should be defined. Statically typed languages,
such as Java and C\#, require a statement to be followed by its 
type definition, which can then be used by the compiler. On the other side, 
in dynamically typed languages, like Ruby and JavaScript, the definition of
type only happens during runtime.

The discussion about that is the best typing system has become 
increasingly more important in recent years due to rapid
popularization of dynamically typed languages ​. According to
The TIOBE Programming Community Index, a well-known ranking that
measures the popularity of programming languages ​, 27\% of
the programming languages ​​in the industry are dynamically typed. 
In 2001, this number was only 17\%. Among the 10
languages ​​on top of the ranking, four are dynamically typed: 
JavaScript , Perl , Python and PHP . In 1998, none of
these languages ​​was among the top 10 ranking.

Several factors may be considered when choosing a
programming language with a dynamic or static type system. 
Since dynamically typed languages are simpler, they allow programmers 
to perform their tasks more quickly.
Also, by removing the repetitive work of defining types,
these languages ​​allow their users to focus on the problem to be solved 
rather than spending time with the rules of language.

Static type systems also have their advantages. 
These can prevent type errors during compilation time. 
Type declarations increase the maintainability of
systems because they act as code documentation , informing
the programmer on the nature of each variable. systems
from these written languages ​​tend to be more efficient,
since it does not need to perform type checking during their
execution. Finally, modern development environments , such
as Eclipse and IDEA , when they have knowledge about the type of
a statement , are able to assist the programmer through
features such as documentation and add code .

This paper presents a study aiming to understand which
the factors described above actually influence the choice of a
developer typecast or not by their statements . In order to obtain
reliable results , this question was studied based on
code developed by programmers in the context of their
everyday activities through a mass analysis data
composed of more than a thousand projects . These projects were written
in Groovy , a language system with hybrid types , which
allows you to choose , for each statement , TIPA it or not . thus,
through a static analysis of this mass of data, it is possible
when developers choose to view each type system and
thereafter enteder what are the factors that influence this
decision .

The remainder of this paper is organized as follows. The
section 2 introduces the main concepts of the Groovy program language.
Sections 3 describes the configuration of the study, which resultas are 
analyzed on Section 4. Section 5 presents threatens to vality while 
Secion 6 shows related work. Finally , section 7 concludes this work and
raises some future work.

2 The Groovy Language

Groovy is an object-oriented
programming language designed to run on the Java platform, but featuring
dynamic characteristics similar to Ruby and Python. Its
adoption has grown remarkably in recent years and, despite
having been launched only six years ago, Groovy 36st most popular 
language in the software industry

In Groovy, a programmer can choose between static and dynamic typing
for each of their statements. Dynamic and static Typing can be combined in the same
code flexibly. In the algorithm 1, for example, the method return is statically
typed, while parameters and local variables are dynamically typed.

Most of the Java language is also valid in Groovy and
Groovy code can interact directly with Java code and
vice versa. These factors have attracted a large number of
Java programmers who want to use Groovy's dynamic functionality
without having to learn a completely different language or change the
execution platform of their systems. 

3 Study Configuration

In this section we describe the dataset and the static code analyzer used in this study.

3.1 Mass Data <sub:Massa-de-Dados>

The projects used in this study were obtained from GitHub, a popular source control service based on Git.
Using Github API, it was possible to obtain the source code of 7268 projects with a total of 9.8 million lines of code. 
The distribution of the zize of these designs is shown in figure ?. 
These projects were developed by a total of 4806 developers and, together, they have aproximately 169 thousand Groovy files.


Static Code Analyzer 3.2

The static code analyzer used in this work is based on the Groovy metaprogramming library. 
With this library,it's possible to create an abstract syntax tree (AST) from Groovy source code using one of the various stages of the Groovy compiler.
The phase chosen for this analysis was the conversion phase, which has sufficient information to determine the type system of each statement.
It occurs before the compiler tries to resolve any external dependencies, making it possible to analyze each file separately without having to compile the project.

The static code analyze is capable of analyzing the following types of statements
\begin{list_type}
	\item Return Methods
	\item Parameters Methods
	\item Parameters Builders
	\item Fields
	\item Local Variables
\end{list_type}

For each item listed above, it is possible to answer the following questions
\begin{list_type}
	\item What is the typing system of the statement?
	\item Is the statement is part of a script or a class?
	\item Is the statement is part of a class of tests?
	\item What is the visibility of the statement? (except for local variables)
\end{list_type}

4 Results <sec:Resultados>

In this section we present the results of the anlysis

4.1 General Result <sub:Resultado-Geral>

About 60\% of the statements are statically typed, while only 40\% of these are dynamically typed. 
Given that a large part of the Groovy programmers have some previous experience with Java and therefore were used to static typing, this suggests that the previous experience of a programmer is an important factor in choosing the type system.

4.2 Results by Type Declaration <sub:Resultados-por-Tipo>

Figure ? shows that dynamic typing is used in local variables declarations with more frequency than in other types of statements.
Since local variables have smaller scope and shorter life time, programmers probably feel less need to document them through the definition of types and end up choosing a simpler way to declare them, by using dynamic typing.

Conversely, constructor parameters are the declaration type with the most static typing usage.
It can be argued that there is a significative concern in documenting these statements by the usage of static typing since these are important elements in the definition of the contract of a module.

4.3 Results for Visibility <sub:Resultados-por-Visibilidade>

According to figure ?, statements with public or protected visibility are those more frequently staticlly typed. 
These statements define the interface of a module and, by typing them, programmers allow the compiler to look for typing problems in the integration with other modules.
In addition to that these statements should be well documented so clients of this module know how to use it making static typing a good option for that purpose.

In the case of parameters and returns of methods, the use of types in statements with protected visibility even surpasses that of statements with public visibility.
It can be argued that protected fields and methods establish a tight contract, since they expose internal elements of a superclass to a subclass.
Apparently programmers understand that  this type of contract should be well document to avoid any problems in such a delicate context.

4.4 Results by Size of Project <sub:Resultados-por-Tamanho>

Figure ? shows the use of dynamic typing in public statements by project size. 
Each bar of this graph represents a group of projects grouped by their size.
The boundaries of each group are defined under each bar.
For example, a project with 1500 lines of code is in the second group, since 1500 lies within the interval *400, 1600*.

This result shows that the use of dynamic typing in public statements decreases as the size of the project
increases. 
The frequency of dynamic typing usage in projects with more than 6400 lines of code is almost half the frequency of smaller projects.
Intuitively, the larger the project, the greater the difficulty of integration and the need for maintenance.
This may lead programmers to prefer the use of static typing in public statements, the most critical  statements in this context.
No pattern can be observed in other types of statements, reinforcing the idea that this pattern is related to the role of public elements in large projects.

4.5 Scripts and Test <sub:Scripts-e-Testes>

Scripts are usually written to perform simple tasks and do not relate to many other modules. 
The same can be said for test code. 
This suggests that dynamic typing would used more often in such contexts since maintainability and integration are not critical factors. 
The result shown in table ? however contradicts this idea.
There is no significant difference in the usage of typing systems in these contexts.


5 Threats to validity

<sec:ameaca>

As mentioned in section ?, programmers tend to continue using the type system they are used to.
Given that most Groovy programmers have prior experience with Java, a statically typed language, the results shown in this work might present a certain tendency to favor static type systems. 
Nevertheless, the analysis by type of declaration given in section ? shows the predominance of dynamic typing over local variables declarations, indicating that, despite the previous experience with Java,
programmers are able to learn to use dynamic typing where they consider it necessary.

Some frameworks require the use of a particular type system in certain situations. Spock, for example, a automates testing framework, requires that the return of tests methods tests to be dynamically typed. 
However, due to the heterogeneity and the large number of projects analyzed, we believe that there is no framework capable of having a significant influence on the overall results of this study.

6 Related Work <sec:Trabalhos-Relacionados>

There are some works in the literature that compare static and dynamic typing systems though controlled studies.
In *experimentwithpurity*, the author compares the performance of two groups of students when aske_d to develop two small systems. 
Both groups used a language developed by the author, Purity. 
The only difference in the language used by the two groups was the typing system.
One group used a statically typed version of Purity while the other used a dynamically typed version of the same language.
Results showed that the group using the dynamic version was significantly more productive than the other. 
Similarly to this work, the author was able to compare two type systems directly while isolating any external factors. 
However, it can be argued that these results may not represent well real life situations of the software industry. This was a short duration study where students were used as examples of developers with no interaction with other programmers. 
In this paper, we try to get more relevant results when analyzing source code developed by programmers during their normal activities.

In a follow up study *hanenbergicpc * , the authors got to opposite conclusi_ons. 
They compared the performance of two groups of developers in maintenance tasks. First group used Java, a statically typed language, and the other used Groovy, but restricting developer to use only dynamic typing in order to simulate a dynamically typed Java.
In this case, the group using the statically typed language, Java, was much more productive.
This contradiction reinforces the argument that the results of controlled studies aren't reliable for this type of study.

In experiments conducted in * rubyvsdruby *, the authors compare the performance of two groups workin_g on small development tasks.
One group used Ruby, a dynamically typed language, while the other used DRuby, a statically typed version of Ruby. 
Results showed that the DRuby compiler rarely managed to capture any errors that weren't already evident for programmers.
Most subjects involved in the study had previous experience with Ruby, which suggests that programmers get used to the lack of static typing in their declarations.

7 Conclusion and Future Work <sec:Conclusão-e-Trabalhos>

This study examines what are the most influencing factors in the choice for a static or dynamic type system. 
There are some controlled studies in the literature about the advantages of each one of these typing system . 
However the results presented here focus on findint the factors that have an actual influence on the decision for one or another through the analysis of a wide range of source code repositories.

When maintainability and the complexity of the integration between modules are considered important, static typing is apparently preferred by programmers Groovy. 
In these situations, the advantages of static typing such as documenting the code or making integration with software development tools possible are relevant advantages considered by Groovy programmers.
Conversely, when these issues are not as critical , the simplicity of dynamic typing seems to be preferred , as seen onlocal variables declarations.
Another important factor is the previous experience of programmers with a given type system.

In future works we wish to analyze the influence of static and dynamic type systems over the robustness of software systems.
In particular , we want to understand whether the use dynamic typing, which limits the compiler's ability to find type problems, has any correlation with the occurrence of defects in the system and if the use of automated testing is able to reduce this correlation.

  Agradecimentos

Este trabalho recebeu apoio financeiro da FAPEMIG, processos 
APQ-02376-11 e APQ-02532-12, e do CNPq processo 485235/2011-0.

*Comando LaTeX: bibtex*

